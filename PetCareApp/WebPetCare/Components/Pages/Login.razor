@page "/login"

@inject IAuthorizationService authService
@inject NavigationManager Navigation


<PageTitle>Login</PageTitle>
<div class="col-12">
    <div class="form-custom-border  container-fluid col-md-8 col-lg-7 offset-md-3 pb-3 bg-body-secondary">
        <div class="text-danger">
            <p class="alert-primary">@error</p>
        </div>
        @if (IsLogin)
        {
            <div class="text-center pt-4 bg-body-tertiary" style="box-shadow:0 1px 4px #6f9ea1; border-radius:12px">
                <h2>Login</h2>
                <hr />
            </div>
            <div class="d-flex flex-row mx-2 px-2 align-items-end">
                <div class="col-lg-3 col-2">
                    
                    </div>
                <EditForm Model="LoginModel" FormName="LoginForm" OnSubmit="LoginFunc" class="col-lg-6 col-8 text-center">
                    <div class="form-group py-2 text-center">
                        <h4>Email</h4>
                        <InputText class="form-control" @bind-Value="LoginModel.Email" />
                        <h4>Password</h4>
                        <InputText  typeof="password" class="form-control" @bind-Value="LoginModel.Password" />
                    </div>
                    <button type="submit" class="btn btn-primary ">Login</button>
                </EditForm>
                <div class="col-lg-3 ps-4 ps-lg-6">
                    <img src="Images/dog.png" style="max-width: 100%; height: auto" />
                </div>
            </div>
        }
        else
        {

        }

    </div>
</div>


@code {
    private bool IsLogin = true;

    [CascadingParameter] 
    public Func<bool, Task> UpdateAuthenticationStatus { get; set; }

    public LoginDto LoginModel { get; set; } = new LoginDto();

    public string error = "";

    public async Task LoginFunc()
    {
        var errorMessage = await authService.Login(LoginModel);
        if (!String.IsNullOrEmpty(errorMessage))
        {
            error = errorMessage;
        }
        else
        {
            await UpdateAuthenticationStatus(true);
            Navigation.NavigateTo("/");
        }
    }

}
