@using WebPetCare.Components.Pages.Search
@inject IServiceService _service
@inject IJSRuntime _JSRuntime
@inject NavigationManager Navigation
@inject IStringLocalizer<ServiceDescr> Localizer

<div class="d-flex justify-content-center">
    <div class="col-lg-10 align-items-center text-center ">
        <div class="form-custom-border p-3 ">
            @if (serviceDto != null)
            {
                @if (!IsEdit)
                {
                    <div class="row text-center">
                        <h3 class="col-6 offset-3" ><b>@Localizer["Service Details"]</b></h3>
                        <button class="btn col-2 me-3 btn-func btn-danger" @onclick="DeleteService"><i class="bi bi-trash"></i>    @Localizer["Delete"]</button>
                        <button class="btn col-2 btn-func btn-warning " @onclick="OnButtonClick"><i class="bi bi-pencil-fill"></i>   @Localizer["Edit"]</button>
                    </div>
                }

                <form method="post" @onsubmit="UpdateService">
                @if (IsEdit)
                {
                    <div class="row text-center">
                            <h3 class="col-6 offset-3"><b>@Localizer["Service Details"]</b></h3>
                            <button type="button" class="btn col-2 mx-1 btn-func btn-danger" @onclick="CancelEdit">@Localizer["Cancel"]</button>
                            <button type="submit" class="btn col-2 btn-func btn-success">@Localizer["Save"]</button>
                    </div>
                }

                <hr />

                <div class="text-start m-4 align-content-center">
                        <div class="row col-12 mb-2 ms-3">
                            <div class="col-8">
                                    <div class="m-2 p-2">
                                        <h4>@Localizer["Name"]</h4>
                                        <InputText @bind-Value="serviceDto.Name"
                                               placeholder="@(serviceDto.Name != null ? serviceDto.Name : Localizer["No name"])"
                                                       disabled=" @(!IsEdit)" class="input-text-style col-12"></InputText>
                                    </div>
                                    <div class="m-2 p-2">
                                        <h4>@Localizer["Description"]</h4>
                                        <InputTextArea @bind-Value="serviceDto.Description"
                                                       placeholder="@(serviceDto.Description != null ? serviceDto.Description : " ")"
                                                       disabled=" @(!IsEdit)" class="input-textarea-style col-12"></InputTextArea>
                                    </div>
                                    
                                <div class="m-2 p-2">
                                    <div class="row mb-3">
                                        <h4 class="col-1">@Localizer["Tags"]</h4>
                                     </div>
                                    @if(IsEdit){
                                        <_TagSearch selectedTags="serviceDto.Tags" updateSelectedTags="UpdateTags"></_TagSearch>
                                    }else{
                                        <div class="d-flex flex-wrap m-2">
                                            @foreach(var tag in serviceDto.Tags)
                                            {
                                                <div class="badge text-white d-inline-flex align-items-center me-2 mt-1 p-2">
                                                    @tag.Name
                                                </div>
                                        }
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-4 text-center p-3 mb-2">
                                <buttton class="btn btn-info col-5 offset-1 m-3" style="font-size:1rem;" @onclick="ToQuestionaryUpdate">@Localizer["Questionary"]</buttton>
                                <buttton class="btn btn-secondary col-5 offset-1 m-3" style="font-size:1rem;" @onclick="ChangeServiceVisibility"><i class="bi bi-eye@(serviceDto.IsHidden ? "" : "-slash")"></i>   @(serviceDto.IsHidden ? Localizer["Show"] : Localizer["Hide"])</buttton>

                            </div>
                        </div>
                        <div class="row m-2 p-2 ms-4 mb-4 align-items-center">

                            <label class="col-1 me-0 ms-2">@Localizer["Rate"]</label>

                            <SfRating Value=@serviceDto.Rate Disabled="true" ShowLabel="true" LabelPosition="Syncfusion.Blazor.Inputs.LabelPosition.Left" CssClass="col-lg-1 col-2 text-start">
                                <FullTemplate>
                                    <img src=@fullTemplateImage widht="25" height="25" />
                                </FullTemplate>
                                <EmptyTemplate>
                                    <img src=@emptyTemplateImage widht="25" height="25" />
                                </EmptyTemplate>
                                <LabelTemplate>@context+</LabelTemplate>
                            </SfRating>
                        </div>
                        <div class="row col-12 justify-content-around">
                            <div class="col-3 m-1">
                                <h4>@Localizer["Minimum Price"], UAN</h4>
                                <InputNumber @bind-Value="@serviceDto.MinimumPrice" class="input-text-style col-7"
                                disabled=" @(!IsEdit)"></InputNumber>
                            </div>
                            <div class="col-3 m-1">
                                <h4>@Localizer["Maximum Price"], UAN</h4>
                                <InputNumber @bind-Value="@serviceDto.MaximumPrice" class="input-text-style col-7" 
                                disabled=" @(!IsEdit)"></InputNumber>
                            </div>
                            <div class="col-3 m-1">
                                <h4>@Localizer["Time, min"]</h4>
                                <InputNumber @bind-Value="@serviceDto.RealTime" class="input-text-style col-7"
                                disabled=" @(!IsEdit)"></InputNumber>
                            </div>
                        </div>
                    
                </div>
            </form>
            }
            else
            {
                <h3>@Localizer["There is no data to display"]</h3>
            }
        </div>
    </div>
</div>




@code {
    [Parameter]
    public GetServiceDto serviceDto { get; set; } = new GetServiceDto();
    private GetServiceDto initialServiceDto = new GetServiceDto();
    public bool IsEdit = false;
    private string fullTemplateImage = "Images/star-fill.svg";
    private string emptyTemplateImage = "Images/star.svg";

    private void OnButtonClick()
    {
        IsEdit = !IsEdit;
        FillInitialData();
    }
    public void UpdateTags()
    {
        StateHasChanged();    
    }

    private void CancelEdit(MouseEventArgs e)
    {
        serviceDto = new GetServiceDto(initialServiceDto);
        IsEdit = !IsEdit;
    }

    private async void UpdateService()
    {
        var res = await _service.UpdateService(serviceDto);
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", Localizer["Data updated and saved successfully!"], "Success");
            OnButtonClick();
            StateHasChanged();
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");

        }
    }

    private void FillInitialData()
    {
        initialServiceDto = new GetServiceDto(serviceDto);
    }

    private async void DeleteService()
    {
        var res = await _service.DeleteService(serviceDto.Id);
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", Localizer["Service was deleted successfully!"], "Success");
            Navigation.NavigateTo("/account");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }

    private async void ChangeServiceVisibility()
    {
        var res = await _service.ChangeServiceVisibility(serviceDto.Id);
        if (String.IsNullOrEmpty(res))
        {
            serviceDto.IsHidden = !serviceDto.IsHidden;
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", serviceDto.IsHidden ? Localizer["Service become hidden!"] : Localizer["Service is now shown!"], "Success");
            StateHasChanged();
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }

    private void ToQuestionaryUpdate()
    {
        Navigation.NavigateTo($"/questionary/edit/serviceId={serviceDto.Id}");
    }
}
<style>
    .e-rating-container .e-rating-label {
        font-size: 20px;
        color: var(--bs-primary);
        font-weight: 700;
        line-height: 18px;
    }

   
</style>
