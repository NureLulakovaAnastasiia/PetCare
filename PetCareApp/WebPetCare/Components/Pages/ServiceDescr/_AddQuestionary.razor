@inject IStringLocalizer<ServiceDescr> Localizer

<div class=" m-4 align-content-center text-center">
    <div class="col-12 mb-2 ms-3">
        <div class="m-2 p-2">
            <div class="form-check align-items-center col-4 text-start">
                <InputCheckbox @bind-Value="isNotNeeded" class="form-check-input" />
                <label class="form-check-label ms-2"><h5 class=" text-info"> @Localizer["Skip questionary creation"]</h5></label>
            </div>
        </div>
    </div>

    @if (!isNotNeeded)
    {
        <div class="row justify-content-end">
            <button class="btn btn-func btn-success col-10" type="button" @onclick="AddQuestion"><i class="bi bi-plus-circle"></i>  @Localizer["Add Question"]</button>
        </div>
        <hr />
        <div>
            <ol>
                @foreach (var question in questions)
                {
                    <li>
                        <div class="mb-3" @key="question">
                            <label class="form-check-label"> @Localizer["Question Text"]</label>
                            <InputText @bind-Value="question.Name" class="form-control" />
                            @{
                                var questionInd = questions.IndexOf(question);
                                question.HasAnswerWithFixedTime = questionInd == fixedQuestionNum;
                            }
                            <div class="row align-items-center justify-content-center">
                                <button class="btn btn-func btn-danger p-1 m-3 col-2" @onclick="() => deleteQuestion(questionInd)"><i class="bi bi-trash"></i>   @Localizer["Delete Question"]</button>
                                <button class="btn btn-func btn-success m-3 col-3" type="button" @onclick="() => AddAnswer(questionInd)"><i class="bi bi-plus-circle"></i>  @Localizer["Add Answer"]</button>
                                <InputCheckbox class="col-1 ms-4 p-3 form-check-input" style="font-size: 20px;" @bind-Value="question.HasAnswerWithFixedTime" @onclick="() => ChooseFixedQuestion(questionInd)"></InputCheckbox>
                                <label class="form-check-label col-3 text-start ms-2 ps-1"> @Localizer["Is Time Fixed"]</label>
                            </div>
                            <ul>
                                @foreach (var answer in question.Answers)
                                {
                                    var image = answer.Photo != null ? $"data:image/png;base64,{Convert.ToBase64String(answer.Photo)}" : null;
                                    var answerInd = questions[questionInd].Answers.IndexOf(answer);
                                    <li>
                                        <div class="row mt-2" @key="answer">
                                            <div class="col-5">
                                                <label class="form-check-label"> @Localizer["Answer"]</label>
                                                <InputText @bind-Value="answer.Text" class="form-control" />
                                                @if (image != null)
                                                {
                                                    <img src="@image" class="pb-2" alt="@Localizer["Answer image"]" style="max-width: 200px;" />
                                                }
                                                <InputFile class="p-2 ms-2" OnChange="@(e => AddImage(e, answerInd, questionInd))" accept="image/*" />
                                            </div>
                                            <div class="row col-6 ms-4">
                                                @if ((fixedQuestionNum == questionInd || fixedQuestionNum == -1))
                                                {
                                                    
                                                    answer.IsTimeFixed = true;
                                                    <div class="form-check col-5">
                                                        @* <InputCheckbox @bind-Value="answer.IsTimeFixed" @onclick="() => ChooseFixedQuestion(questionInd, answerInd)" *@
                                                        @* class="form-check-input" /> *@
                                                        
                                                        <fieldset disabled="@(!answer.IsTimeFixed)">
                                                            @* Maximum is default if nothing else  *@
                                                                <div class="form-check mt-3">
                                                                    <InputCheckbox @bind-Value="answer.IsTimeMinimum" class="form-check-input" />
                                                                    <label class="form-check-label"> @Localizer["Minimum Time"]</label>
                                                                </div>
                                                           
                                                        </fieldset>
                                                    </div>
                                                }
                                                <div class="col-4 text-center">
                                                    <label class="form-check-label"> @Localizer["Time"] @((fixedQuestionNum == questionInd) ? Localizer["(fixed)"] : Localizer["(+/- format)"])</label>
                                                    <InputNumber @bind-Value="answer.Time" class="form-control-number offset-2" />
                                                </div>
                                                <div class="col-1 mt-3 text-center">
                                                    <div class="btn  btn-danger p-2" @onclick="() => deleteAnswer(questionInd, answerInd)"><i class="bi bi-trash"></i></div>
                                                </div>
                                            </div>
                                        </div>
                                    </li>
                                    <hr />
                                }
                            </ul>
                        </div>
                    </li>
                }
                <div  class="btn col-2 btn-info mt-3 ms-3" style="font-size: 1em;" @onclick="ReturnToServiceCreation"> @Localizer["To previous step"]</div>
                <button type="submit" @onclick="SubmitAdding" class="btn col-2 p-3 btn-primary mt-3" style="font-size: 1em"> @Localizer["Save"]</button>

            </ol>
        </div>
    }
    else
    {
        <button type="button" class="btn col-2   btn-warning mt-3 ms-3" style="font-size: 1em; " @onclick="ReturnToServiceCreation"> @Localizer["To previous step"]</button>
        <button type="submit" class="btn col-2 p-3  btn-success mt-3" style="font-size: 1em" @onclick="SubmitAdding"> @Localizer["Next"]</button>

    }
</div>



@code {
    private bool isNotNeeded { get; set; } = false;

    [Parameter]
    public List<AddQuestionDto> questions { get; set; }
    [Parameter]
    public EventCallback returnToServiceCreate { get; set; }

    [Parameter]
    public EventCallback submitServiceCreation { get; set; }
    private IBrowserFile SelectedFile;

    private int fixedQuestionNum = -1;
    private int fixedAnswerNum = -1;

    private void ToggleVisibility()
    {
        isNotNeeded = !isNotNeeded;
        questions.Clear();
    }

    private async Task AddImage(InputFileChangeEventArgs e, int answerInd, int questionInd)
    {
        SelectedFile = e.File;

        using var stream = new MemoryStream();
        await SelectedFile.OpenReadStream(long.MaxValue).CopyToAsync(stream);
        var question = questions.ElementAt(questionInd);
        if (question != null)
        {
            var answer = question.Answers[answerInd];
            if (answer != null)
            {
                answer.Photo = stream.ToArray();
                StateHasChanged();

            }
        }

    }


    private void deleteAnswer(int questionInd, int answerInd)
    {
        if (questionInd >= 0 && questionInd < questions.Count)
        {
            if (answerInd >= 0 && answerInd < questions[questionInd].Answers.Count)
            {
                questions[questionInd].Answers.RemoveAt(answerInd);
            }
        }
    }

    private void deleteQuestion(int questionInd)
    {
        if (questionInd < questions.Count && questionInd >= 0)
        {
            questions.RemoveAt(questionInd);
        }
    }

    private async Task SubmitAdding()
    {
        if(fixedQuestionNum != -1 && fixedQuestionNum < questions.Count)
        {
            questions[fixedQuestionNum].HasAnswerWithFixedTime = true;
        }
        bool time;
        for (int i = 0; i < questions.Count; i++)
        {
            time = false;
            if (i == fixedQuestionNum)
            {
                time = true;    
            }
            foreach (var answer in questions[i].Answers)
            {
                answer.IsTimeFixed = time;
            }
        }
        if (submitServiceCreation.HasDelegate)
        {
            await submitServiceCreation.InvokeAsync();
        }
    }

    private void AddQuestion()
    {
        questions.Add(new AddQuestionDto { Answers = new List<AddAnswerDto>() });
    }

    private void AddAnswer(int questionInd)
    {
        if (questionInd >= 0 && questionInd < questions.Count)
        {
            questions[questionInd].Answers.Add(new AddAnswerDto());
        }
    }

    private void ChooseFixedQuestion(int questionInd)
    {
        if (fixedQuestionNum == questionInd)
        {
            fixedQuestionNum = -1;
        
        }
        else
        {
            fixedQuestionNum = questionInd;
            
        }
        StateHasChanged();
    }

    private async Task ReturnToServiceCreation()
    {
        if (returnToServiceCreate.HasDelegate)
        {
            await returnToServiceCreate.InvokeAsync();
        }
    }
}
