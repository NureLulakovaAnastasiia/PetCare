@page "/record/{serviceId:int}/{serviceName}"
@using Microsoft.AspNetCore.Html
@using Syncfusion.Blazor.Navigations
@inject IJSRuntime _JSRuntime
@inject IUserService _userService
@inject NavigationManager Navigation
@inject IStringLocalizer<Resources.Record> Localizer



<div class="container justify-content-center">
    <div class="offset-3 col-6 text-center">
        <h2><strong>@Localizer["Record"]</strong></h2>
        <h4 class="green-blue-text">@Localizer["For service"]: @serviceName</h4>
        @if (analisysDto != null && analisysDto.Description != null)
        {
            <div style="white-space: pre-line;">
                <h5>@analisysDto.Description</h5>
            </div>
        }
            <SfStepper ID="stepper" ActiveStep="@step" CssClass="mt-3">
                <ChildContent>
                    <StepperSteps >
                        <StepperStep Disabled="true"></StepperStep>
                        <StepperStep Disabled="true"></StepperStep>
                        <StepperStep Disabled="true"></StepperStep>
                    </StepperSteps>
                </ChildContent>
        </SfStepper>
    </div>

    <div>
        <button class="btn btn-danger" @onclick="GoBack">@Localizer["Back"]</button>
        @switch (step)
        {
            case 1:
                <_TimeSlotsChoice data="analisysDto" OnSlotSubmit="SubmitSlot" ToNextStep="GoNext"></_TimeSlotsChoice>
                break;
            case 2:
                <div class="d-flex justify-content-center">
                    <div class="col-lg-10 align-items-center text-center ">
                        <div class="form-custom-border p-3">
                            <h3>@Localizer["Submit record"]</h3>
                            <h4 class="green-blue-text">@Localizer["Chosen time"]: @chosenSlot.Date.ToString("dddd, dd MMMM yyyy"), @chosenSlot.StartTime.ToString(@"hh\:mm") - @chosenSlot.EndTime.ToString(@"hh\:mm")</h4>
                            <hr />
                            <div class=" d-flex flex-column align-items-center">
                                <label>@Localizer["WriteCommentToRecord"]</label>
                                <InputTextArea class="input-textarea-style col-8" @bind-Value="comment"></InputTextArea>
                                <button class="btn btn-primary btn-submit mt-4" @onclick="SubmitRecord">@Localizer["Submit"]</button>
                            </div>
                        </div>
                    </div>
                </div>
                break;
            default:
                <_FillQuestionary serviceId="@serviceId" OnAnalisysChanged="UpdateAnalisys" ToNextStep="GoNext"></_FillQuestionary>
                break;
        }
    </div>
</div>

@code {
    [Parameter]
    public int serviceId { get; set; }
    [Parameter]
    public string serviceName { get; set; } = string.Empty;
    public int step { get; set; } = 0;

    public QuestionaryAnalisysDto analisysDto { get; set; } = new QuestionaryAnalisysDto();

    public TimeSlot chosenSlot { get; set; } = new TimeSlot();
    public string comment { get; set; } = "";
    public void GoBack()
    {
        if (step > 0)
        {
            step--;
            StateHasChanged();
        }
        else
        {
            Navigation.NavigateTo($"/service-id={serviceId}");
        }
    }
    private void UpdateAnalisys(QuestionaryAnalisysDto updatedAnalisys)
    {
        analisysDto = updatedAnalisys;
    }

    public void GoNext()
    {
        if (step < 2)
        {
            step++;
            StateHasChanged();
        }

    }

    private void SubmitSlot(TimeSlot slot)
    {
        chosenSlot = slot;
    }

    private async Task SubmitRecord()
    {
        if(analisysDto != null && chosenSlot != null)
        {
            var record = new RecordDto
                {
                    ServiceId = serviceId,
                    StartTime = chosenSlot.Date.Date + chosenSlot.StartTime,
                    EndTime = chosenSlot.Date.Date + chosenSlot.EndTime,
                    Description = analisysDto.Description,
                    Comment = comment
                };
            var res = await _userService.AddRecord(record);
            if (String.IsNullOrEmpty(res))
            {
                showToastr("", Localizer["SuccessRecord"]);
                Navigation.NavigateTo($"/service-id={serviceId}");
            }
            else
            {
                showToastr(res);
            }
        }
    }

    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }
}

<style>
    .e-stepper .e-stepper-steps .e-step-container {
        background: var(--bs-tertiary);
        
    }

    e-step-container e-step-disabled{
        color: var(--bs-primary) !important;
        order: var(--bs-secondary) 1px solid !important;
    }

    .e-stepper .e-stepper-progressbar {
        background-color: rgba(var(--bs-secondary-rgb), 0.3);
        height:2px;
    }

    #stepper .e-step-completed  {
        color: var(--bs-primary);
    }

    #stepper .e-step-inprogress {
       
    }

    #stepper .e-step-notstarted{
        color: #bdbdbd;
    }

    .e-stepper:not(.e-steps-focus) .e-step-selected .e-step {
        background-color: var(--bs-secondary);
    }

    .e-stepper:not(.e-steps-focus) .e-step-selected .e-step {
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px var(--bs-secondary), 0 0 0 8px #fff;
    }

    .e-stepper .e-step-container:not(.e-step-focus).e-step-notstarted .e-step{
        box-shadow: 0 0 0 6px rgba(171, 206, 222, 1);
    }

    .e-stepper:not(.e-steps-focus) .e-step-notstarted .e-step {
        background-color: rgba(171, 206, 222, 1);
    }

    .e-stepper .e-step-container:not(.e-step-focus).e-step-completed .e-step{
        box-shadow: 0 0 0 2px #fff, 0 0 0 4px var(--bs-primary), 0 0 0 8px #fff;
    }

    .e-stepper:not(.e-steps-focus) .e-step-completed .e-step {
        background-color: var(--bs-primary);
    }

    .e-stepper .e-stepper-progressbar > .e-progressbar-value {
        background-color: var(--bs-primary);
    }
</style>
