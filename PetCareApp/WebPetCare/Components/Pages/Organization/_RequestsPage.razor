@inject IOrganizationService orgService
@inject IJSRuntime _JSRuntime
@inject NavigationManager Navigation
@inject SfDialogService DialogService
@inject IStringLocalizer<Resources.Organization> Localizer
@inject IStringLocalizer<Resources.EnumResources> EnumLocalizer


<div class="d-flex justify-content-center">
    <div class="col-lg-10 align-items-center text-center ">
        <div class="form-custom-border p-3 justify-content-center">
            <div class="row text-center">
                <h3 class="col-8 offset-2"><b>@Localizer["Requests"]</b></h3>
                <hr />
            </div>
            @if (requests != null && requests.Count > 0)
            {
                <div class="row justify-content-end">
                    <div class="col-3">
                        <h6>@Localizer["Sort by date"]</h6>
                        <SfDropDownList TValue="SortOptions.SortDirection" TItem="SelectListItem<SortOptions.SortDirection>"
                                        DataSource="SortTypes" @bind-Value="sortType">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="SortOptions.SortDirection" TItem="SelectListItem<SortOptions.SortDirection>"
                                                ValueChange="SortRequests"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                    <div class="col-3">
                        <h6>@Localizer["Filter by status"]</h6>
                        <SfDropDownList TValue="SortOptions.FilterByRequestStatus" TItem="SelectListItem<SortOptions.FilterByRequestStatus>"
                                        DataSource="FilterTypes" @bind-Value="filterType">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="SortOptions.FilterByRequestStatus" TItem="SelectListItem<SortOptions.FilterByRequestStatus>"
                                                ValueChange="FilterRequests"></DropDownListEvents>
                        </SfDropDownList>
                    </div>

                    @if (filteredRequests.Count == 0)
                    {
                        <h3 class="mt-5">@Localizer["No requests were found"].</h3>
                    }
                </div>

                <div class="row align-items-center justify-content-center">

                    @foreach (var request in filteredRequests)
                    {
                        <div class="row col-10 form-custom-border p-3 m-3 main-review">
                            <div class="col-8 text-start offset-1 green-blue-text">
                                <h4>@Localizer["Request"] №@request.Id</h4>
                                @if (role == "Organization")
                                {
                                    <NavLink @onclick="() => GoToMasterPage(request.AppUserId)" class="nav-link nav-link-underline">@Localizer["From"]: <strong>@request.UserName</strong></NavLink>
                                }
                                else{
                                    <NavLink @onclick="() => GoToOrgPage(request.OrganizationId)" class="nav-link nav-link-underline">@Localizer["Organization"]: <strong>@request.OrganizationName</strong></NavLink>
                                }
                                <p>@Localizer["Date"]: @request.Date.ToString("F")</p>

                            </div>
                            <div class="col-3 align-items-center">
                                @if (request.Status == "New" && role == "Organization")
                                {
                                    <button class="btn  btn-success col-9 mb-1 p-2" @onclick="() => AcceptRequest(request.Id)">@Localizer["Accept"]</button>
                                    <button class="btn  btn-danger col-9 p-2" @onclick="() => RejectRequest(request.Id)">@Localizer["Reject"]</button>
                                }
                                else
                                {
                                    <h5 style="color: @(ChooseColor(request.Status))">@Localizer["Status"]: @Localizer[request.Status]</h5>
                                }
                            </div>

                        </div>
                    }
                </div>
            }
            else
            {
                <h3>No data was found</h3>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string role { get; set; } = "Master";
    public List<GetRequestDto> requests { get; set; } = new List<GetRequestDto>();
    public List<GetRequestDto> filteredRequests { get; set; } = new List<GetRequestDto>();

    private SortOptions.SortDirection sortType = SortOptions.SortDirection.Newest;
    private SortOptions.FilterByRequestStatus filterType = SortOptions.FilterByRequestStatus.All;

    private List<SelectListItem<SortOptions.SortDirection>> SortTypes = new List<SelectListItem<SortOptions.SortDirection>>();
    private List<SelectListItem<SortOptions.FilterByRequestStatus>> FilterTypes = new List<SelectListItem<SortOptions.FilterByRequestStatus>>();

    protected override async Task OnInitializedAsync()
    {
        SetSortAndFilters();
    }

    private void SetSortAndFilters()
    {
        SortTypes = Enum.GetValues(typeof(SortOptions.SortDirection))
           .Cast<SortOptions.SortDirection>()
           .Select(e => new SelectListItem<SortOptions.SortDirection>(e, e.GetLocalizedEnum(EnumLocalizer)))
           .ToList();
        FilterTypes = Enum.GetValues(typeof(SortOptions.FilterByRequestStatus))
       .Cast<SortOptions.FilterByRequestStatus>()
       .Select(e => new SelectListItem<SortOptions.FilterByRequestStatus>(e, e.GetLocalizedEnum(EnumLocalizer)))
       .ToList();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var data = await orgService.GetRequests();
            if (data != null)
            {
                requests = data;
                FilterRequests();
                SortRequests();

            }
            else
            {
                showToastr(Localizer["Error during getting data"]);
            }
            StateHasChanged();
        }
        SetSortAndFilters();
    }

    private void GoToMasterPage(string masterId)
    {
        Navigation.NavigateTo($"/master/{masterId}");
    }

    private void GoToOrgPage(int orgId)
    {
        Navigation.NavigateTo($"/organization/{orgId}");
    }


    private async Task AcceptRequest(int requestId)
    {
        bool isConfirm = await DialogService.ConfirmAsync(Localizer["SureAcceptRequest"], Localizer["Accept request"]);
        if (isConfirm)
        {

            var res = await orgService.AcceptRequest(requestId);
            if (String.IsNullOrEmpty(res))
            {
                showToastr("", Localizer["Request was succefully accepted"]);
                var ind = requests.FindIndex(r => r.Id == requestId);
                if (ind != -1)
                {
                    requests[ind].Status = "Accepted";
                    StateHasChanged();
                }
            }
            else
            {
                showToastr(res);
            }
        }
    }

    private async Task RejectRequest(int requestId)
    {
        bool isConfirm = await DialogService.ConfirmAsync(Localizer["SureRejectRequest"], Localizer["Reject request"]);
        if (isConfirm)
        {
            var res = await orgService.RejectRequest(requestId);
            if (String.IsNullOrEmpty(res))
            {
                showToastr("", Localizer["Request was succefully rejected"]);
                var ind = requests.FindIndex(r => r.Id == requestId);
                if (ind != -1)
                {
                    requests[ind].Status = "Rejected";
                    StateHasChanged();
                }
            }
            else
            {
                showToastr(res);
            }
        }
    }

    private string ChooseColor(string status)
    {
        switch (status)
        {
            case "Accepted":
                return "var(--bs-primary)";
            case "Rejected":
                return "var(--bs-danger)";
            default:
                return "var(--bs-info)";
        }

    }

    public void SortRequests()
    {
        switch (sortType)
        {
            case SortOptions.SortDirection.Newest:
                filteredRequests = filteredRequests.OrderByDescending(e => e.Date).ToList();
                break;
            case SortOptions.SortDirection.Oldest:
                filteredRequests = filteredRequests.OrderBy(e => e.Date).ToList();

                break;
        }
    }

    public void FilterRequests()
    {
        switch (filterType)
        {
            case SortOptions.FilterByRequestStatus.All:
                filteredRequests = requests.ToList();
                break;
            case SortOptions.FilterByRequestStatus.New:
                filteredRequests = requests.Where(e => e.Status == "New").ToList();
                break;
            case SortOptions.FilterByRequestStatus.Accepted:
                filteredRequests = requests.Where(e => e.Status == "Accepted").ToList();
                break;
            case SortOptions.FilterByRequestStatus.Rejected:
                filteredRequests = requests.Where(e => e.Status == "Rejected").ToList();
                break;

        }
        SortRequests();
    }

    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }
}
