@inject IOrganizationService orgService
@inject IJSRuntime _JSRuntime
@inject NavigationManager Navigation
@inject SfDialogService DialogService
@inject IStringLocalizer<Resources.Organization> Localizer
@inject IStringLocalizer<Resources.EnumResources> EnumLocalizer

<div class="d-flex justify-content-center">
    <div class="col-lg-10 align-items-center text-center ">
        <div class="form-custom-border p-3 justify-content-center">
            <div class="row text-center">
                <h2 class="col-8 offset-2"><b>@Localizer["Employees"]</b></h2>
                <hr />
            </div>


            <div class="row justify-content-end">
                <div class="col-3">
                    <h6>@Localizer["Sort by date"]</h6>
                    <SfDropDownList TValue="SortOptions.SortDirection" TItem="SelectListItem<SortOptions.SortDirection>"
                                    DataSource="SortTypes" @bind-Value="sortType">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="SortOptions.SortDirection" TItem="SelectListItem<SortOptions.SortDirection>"
                                            ValueChange="SortEmployees"></DropDownListEvents>
                    </SfDropDownList>
                </div>
                <div class="col-3">
                    <h6>@Localizer["Filter"]</h6>
                    <SfDropDownList TValue="SortOptions.FilterEmployees" TItem="SelectListItem<SortOptions.FilterEmployees>"
                                    DataSource="FilterTypes" @bind-Value="filterType">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="SortOptions.FilterEmployees" TItem="SelectListItem<SortOptions.FilterEmployees>"
                                            ValueChange="FilterEmployees"></DropDownListEvents>
                    </SfDropDownList>
                </div>

                @if (filteredEmployees.Count == 0)
                {
                    <h3 class="mt-5">@Localizer["No employees were found"].</h3>
                }
            </div>
            @if (filteredEmployees != null && filteredEmployees.Count > 0)
            {
               
                <div class="d-flex flex-wrap justify-content-around w">
                    @foreach (var employee in filteredEmployees)
                    {
                        <div class="card m-3 p-3 col-3">
                            <div class="card-img">
                                <div class="image-card-container">
                                    @if (employee.Photo != null && employee.Photo.Length > 0)
                                    {
                                        var base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(employee.Photo)}";
                                        <img class="fixed-image" src="@base64Image" alt="Pets Image" style="display:block;">


                                    }
                                    else
                                    {
                                        <div class="">
                                            <p>@Localizer["No image available"]</p>
                                        </div>
                                    }
                                </div>
                                <h4 class="mt-2"><a href="/master/@employee.masterId"><b>@employee.Name</b></a></h4>
                            </div>
                            <hr class="mt-0 pt-0 text-center" />
                            <div class="card-body text-center">
                                <p>@Localizer["Acceptance Date"]: @(employee.AcceptanceDate.ToString("g") ?? "")</p>
                                @if(employee.DismissalDate != null)
                                {
                                  <p>@Localizer["Dismissal Date"]: @(employee.DismissalDate?.ToString("g") ?? "")</p>
                                }
                                else
                                {
                                    <button class="btn btn-danger p-2" 
                                            @onclick="() => Dismiss(employee.Id)">
                                        @Localizer["Dismiss"]
                                    </button>
                                }
                               
                            </div>
                           
                        </div>
                    }
                </div>
            }
            else
            {
                <h3>@Localizer["No data was found"]</h3>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int orgId { get; set; }

    public List<GetEmployeeDto> employees { get; set; } = new List<GetEmployeeDto>();
    public List<GetEmployeeDto> filteredEmployees { get; set; } = new List<GetEmployeeDto>();

    private SortOptions.SortDirection sortType = SortOptions.SortDirection.Newest;
    private SortOptions.FilterEmployees filterType = SortOptions.FilterEmployees.All;

    private List<SelectListItem<SortOptions.SortDirection>> SortTypes = new List<SelectListItem<SortOptions.SortDirection>>();
    private List<SelectListItem<SortOptions.FilterEmployees>> FilterTypes = new List<SelectListItem<SortOptions.FilterEmployees>>();



    protected override async Task OnInitializedAsync()
    {
        SetSortAndFilters();
    }


    private void SetSortAndFilters()
    {
        SortTypes = Enum.GetValues(typeof(SortOptions.SortDirection))
            .Cast<SortOptions.SortDirection>()
            .Select(e => new SelectListItem
        <SortOptions.SortDirection>
                (e, e.GetLocalizedEnum(EnumLocalizer)))
            .ToList();
        FilterTypes = Enum.GetValues(typeof(SortOptions.FilterEmployees))
       .Cast<SortOptions.FilterEmployees>()
       .Select(e => new SelectListItem<SortOptions.FilterEmployees>(e, e.GetLocalizedEnum(EnumLocalizer)))
       .ToList();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var res = await orgService.GetEmployees(orgId);
            if (res.IsSuccess)
            {
                employees = res.Data;
                FilterEmployees();
            }
            else
            {
                showToastr(res.ErrorMessage);
            }
        }
        SetSortAndFilters();
    }

    public async Task Dismiss(int employeeId)
    {
        bool isConfirm = await DialogService.ConfirmAsync(Localizer["SureDismissEmployee"], Localizer["Fire employee"]);
        if (isConfirm)
        {
            var res = await orgService.DismissEmployee(employeeId);
            if (String.IsNullOrEmpty(res))
            {
                showToastr("", Localizer["Employee was dismissed"]);
                StateHasChanged();
            }
            else
            {
                showToastr(res);
            }
        }
        FilterEmployees();
    }

    public void SortEmployees()
    {
        switch (sortType)
        {
            case SortOptions.SortDirection.Newest:
                filteredEmployees = filteredEmployees.OrderByDescending(e => e.AcceptanceDate).ToList();
                break;
            case SortOptions.SortDirection.Oldest:
                filteredEmployees = filteredEmployees.OrderBy(e => e.AcceptanceDate).ToList();

                break;
        }
    }

    public void FilterEmployees()
    {
        switch (filterType)
        {
            case SortOptions.FilterEmployees.All:
                filteredEmployees = employees.ToList();
                break;
            case SortOptions.FilterEmployees.Fired:
                filteredEmployees = employees.Where(e => e.DismissalDate != null).ToList();
                break;
            case SortOptions.FilterEmployees.Working:
                filteredEmployees = employees.Where(e => e.DismissalDate == null).ToList();
                break;

        }

        SortEmployees();
        StateHasChanged();
    }

    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }

}

<style>
    .image-card-container {
        width: 100%;
        height: 280px;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        background-color: #f3f3f3;
    }

    .fixed-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .placeholder {
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
       
        background: rgba(0, 0, 0, 0.05);
    }

    .e-dropdownbase .e-list-item, .e-dropdownbase .e-list-item.e-item-focus {
        color: var(--bs-secondary);
        font-family: var(--bs-font-sans-serif);
        min-height: 29px;
    }

        .e-dropdownbase .e-list-item.e-item-focus, .e-dropdownbase .e-list-item.e-active, .e-dropdownbase .e-list-item.e-active.e-hover, .e-dropdownbase .e-list-item.e-hover {
            color: #023c57;
            background-color: rgba(var(--bs-secondary-rgb), 0.1);
        }

    .dropdown .e-dropdownlist {
        color: inherit !important;
    }
</style>
