@inject IOrganizationService orgService
@inject IJSRuntime _JSRuntime
@inject NavigationManager Navigation
@inject SfDialogService DialogService

<div class="d-flex justify-content-center">
    <div class="col-lg-10 align-items-center text-center ">
        <div class="form-custom-border p-3 justify-content-center">
            <div class="row text-center">
                <h2 class="col-8 offset-2"><b>Employees</b></h2>
                <hr />
            </div>
            @if (employees != null && employees.Count > 0)
            {
                <div class="d-flex flex-wrap justify-content-around w">
                    @foreach (var employee in employees)
                    {
                        <div class="card m-3 p-3 col-3">
                            <div class="card-img">
                                <div class="image-card-container">
                                    @if (employee.Photo != null && employee.Photo.Length > 0)
                                    {
                                        var base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(employee.Photo)}";
                                        <img class="fixed-image" src="@base64Image" alt="Pets Image" style="display:block;">


                                    }
                                    else
                                    {
                                        <div class="">
                                            <p>No image available</p>
                                        </div>
                                    }
                                </div>
                                <h4 class="mt-2"><a href="/master/@employee.masterId"><b>@employee.Name</b></a></h4>
                            </div>
                            <hr class="mt-0 pt-0 text-center" />
                            <div class="card-body text-center">
                                <p>Acceptance Date: @(employee.AcceptanceDate.ToString("g") ?? "")</p>
                                @if(employee.DismissalDate != null)
                                {
                                  <p>Dismissal Date: @(employee.DismissalDate?.ToString("g") ?? "")</p>
                                }
                                else
                                {
                                    <button class="btn btn-danger p-2" 
                                            @onclick="() => Dismiss(employee.Id)">
                                        Dismiss
                                    </button>
                                }
                               
                            </div>
                           
                        </div>
                    }
                </div>
            }
            else
            {
                <h3>No data was found</h3>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int orgId { get; set; }

    public List<GetEmployeeDto> employees { get; set; } = new List<GetEmployeeDto>();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var res = await orgService.GetEmployees(orgId);
            if (res.IsSuccess)
            {
                employees = res.Data;
                StateHasChanged();
            }
            else
            {
                showToastr(res.ErrorMessage);
            }

        }
    }

    public async Task Dismiss(int employeeId)
    {
        bool isConfirm = await DialogService.ConfirmAsync("Are you sure you want to fire this employee?", "Fire employee");
        if (isConfirm)
        {
            var res = await orgService.DismissEmployee(employeeId);
            if (String.IsNullOrEmpty(res))
            {
                showToastr("", "Employee was dismissed");
                StateHasChanged();
            }
            else
            {
                showToastr(res);
            }
        }

    }

    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }

}

<style>
    .image-card-container {
        width: 100%;
        height: 280px;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        background-color: #f3f3f3;
    }

    .fixed-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .placeholder {
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
       
        background: rgba(0, 0, 0, 0.05);
    }

</style>
