@inject IOrganizationService orgService
@inject IJSRuntime _JSRuntime
@inject NavigationManager Navigation
@inject SfDialogService DialogService

<div class="d-flex justify-content-center">
    <div class="col-lg-10 align-items-center text-center ">
        <div class="form-custom-border bg-body-secondary p-3 ">
            @if (!IsEdit && isEditable)
            {
                <div class="row text-center">
                    <h3 class="col-7 offset-2"><b>My portfolio</b></h3>
                    <button class="btn col-2 btn-func" @onclick="OnButtonClick"><i class="bi bi-pencil-fill"></i>   Edit</button>
                    <button class="btn col-2 btn-func ms-2" @onclick="OpenModal"><i class="bi bi-plus"></i>   Add</button>
                </div>
            }


            @if (IsEdit && isEditable)
            {
                <div class="row text-center">
                    <h3 class="col-7 offset-2"><b>My portfolio</b></h3>
                    <button type="button" class="btn col-2 mx-1 btn-func-danger" @onclick="CancelEdit">Finish</button>
                </div>
                <hr />
            }

            <div class="container my-4">
                <div class="row">
                    @if (portfolio == null || portfolio.Count == 0)
                    {
                        <h3>Portfolio is not available or empty</h3>
                    }
                    else
                    {
                        @foreach (var portfolioDto in portfolio)
                        {
                            <div class="col-md-3 mb-4">
                                <div class="card">

                                    @if (portfolioDto.Photo != null && portfolioDto.Photo.Length > 0)
                                    {
                                        var base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(portfolioDto.Photo)}";
                                        <img src="@base64Image" class="card-img-top" alt="Portfolio Image" />
                                    }
                                    else
                                    {
                                        <div class="card-body text-center">
                                            <p>No image available</p>
                                        </div>
                                    }
                                    <div class="card-body">
                                        <h3>@portfolioDto.masterName</h3>
                                        <h5>@portfolioDto.Text</h5>
                                        @if (IsEdit)
                                        {
                                            <button class="btn btn-func-danger" @onclick="()=>DeletePortfolio(portfolioDto.Id)"><i class="bi bi-trash"></i></button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

            <SfDialog ShowCloseIcon="true" IsModal="true" Width="800px" @bind-Visible="@IsModalOpen">
                <DialogTemplates>
                    <Header>
                        <div class="text-center">
                            <h2>Add portfolio</h2>
                        </div>
                    </Header>
                    <Content>
                        <div class="row text-center">
                            @foreach (var masterPortfolio in mastersPortfolios)
                            {
                                <div class="col-md-3 mb-4">
                                    <div class="row">
                                        <div class="col-1 me-1">
                                            <SfCheckBox @bind-Checked="@masterPortfolio.IsChecked" Label="Choose"></SfCheckBox>

                                        </div>
                                        <div class="card col-10">
                                            @if (masterPortfolio.Photo != null && masterPortfolio.Photo.Length > 0)
                                            {
                                                var base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(masterPortfolio.Photo)}";
                                                <img src="@base64Image" class="card-img-top" alt="Portfolio Image" />
                                            }
                                            else
                                            {
                                                <div class="card-body text-center">
                                                    <p>No image available</p>
                                                </div>
                                            }
                                            <div class="card-body">
                                                <h5>@masterPortfolio.masterName</h5>
                                                <p>@masterPortfolio.Text</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </Content>
                </DialogTemplates>

                <DialogButtons>
                    <DialogButton Content="Add" IsPrimary="true" OnClick="@AddOrgPortfolios" />
                    <DialogButton Content="Cancel" OnClick="@CloseModal" />
                </DialogButtons>
            </SfDialog>

        </div>
    </div>
</div>




@code {
    [Parameter]
    public int orgId { get; set; }
    [Parameter]
    public bool isEditable { get; set; } = false;
    public List<OrganizationPortfolioDto> portfolio { get; set; } = new List<OrganizationPortfolioDto>();
    public bool IsEdit = false;
    private bool IsModalOpen = false;
    public List<OrganizationPortfolioDto> mastersPortfolios { get; set; } = new List<OrganizationPortfolioDto>();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var dto = await orgService.getOrganizationPortfolio(orgId);
            if (dto.IsSuccess)
            {
                portfolio = dto.Data;
            }
            else
            {
                showToastr(dto.ErrorMessage);
            }
            StateHasChanged();
        }
    }

    private async Task DeletePortfolio(int id)
    {
        var item = portfolio.FirstOrDefault(x => x.Id == id);
        if (item != null)
        {
            var res = await orgService.RemoveOrgPortfolio(id);
            if (String.IsNullOrEmpty(res))
            {
                showToastr("", "Item was succefully removed");
                portfolio.Remove(item);
                mastersPortfolios.Add(item);
                StateHasChanged();
            }
            else
            {
                showToastr(res);
            }
        }
    }

    private async Task AddOrgPortfolios()
    {
        var itemsToAdd = mastersPortfolios.Where(p => p.IsChecked).ToList();
        if(itemsToAdd != null && itemsToAdd.Count > 0)
        {
            var ids = itemsToAdd.Select(p => p.Id).ToList();
            if(ids != null)
            {
                var res = await orgService.AddOrgPortfolios(ids);
                if (String.IsNullOrEmpty(res))
                {
                    portfolio.AddRange(itemsToAdd);
                    mastersPortfolios = mastersPortfolios.Except(itemsToAdd).ToList();
                    CloseModal();
                }
                else
                {
                    showToastr(res);
                }
            }
        }
        else
        {
            showToastr("You haven't chosen items to add");
        }
    }

    private async Task OpenModal()
    {
        IsModalOpen = true;
        var res = await orgService.getOrgMastersPortfolios(orgId);
        if (res.IsSuccess)
        {
            mastersPortfolios = res.Data.Except(portfolio).ToList();
            StateHasChanged();
        }
        else
        {
            showToastr(res.ErrorMessage);
        }

    }
    private void CancelEdit()
    {
        IsEdit = false;
    }
    private void CloseModal()
    {
        IsModalOpen = false;
        StateHasChanged();
    }

    private void OnButtonClick()
    {
        IsEdit = !IsEdit;
    }

    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }
}
