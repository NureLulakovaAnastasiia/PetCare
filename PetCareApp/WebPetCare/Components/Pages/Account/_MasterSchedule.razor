@inject IUserService _userService
@inject SfDialogService DialogService
@inject IJSRuntime _JSRuntime
@inject IStringLocalizer<Account> Localizer



<div class="d-flex justify-content-center">
    <div class="col-lg-10 col-12 align-items-center text-center ">
        <div class="form-custom-border  p-3 mt-3">
            <div class="row text-center justify-content-around">
                <div class="@(isEditable ? "col-4 offset-3" : "col-12")">
                    <h2><strong>@Localizer["Schedule"]</strong></h2>
                </div>
                @if (isEditable)
                {
                    <div class="col-2">
                        <button class="btn btn-primary p-2" @onclick="AddSchedule"><i class="bi bi-plus-circle"></i>  @Localizer["Add"]</button>
                    </div>
                }
            </div>
            <div class="m-3 row align-content-center">
                <table class="table col-lg-10 col-xl-10 col-8">
                    <thead>
                        <tr>
                            <th>@Localizer["Day"]</th>
                            <th>@Localizer["Start Time"]</th>
                            <th>@Localizer["End Time"]</th>
                            @if (isEditable)
                            {
                                <th>@Localizer["Actions"]</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var time in schedule)
                        {
                            var dayOrDate = time.DayOfWeek != null ? culture.DateTimeFormat.GetDayName((DayOfWeek)time.DayOfWeek) : time.Date?.ToString("d");
                            <tr >
                                <td class="align-content-center"><h4>@dayOrDate</h4></td>
                                <td class="align-content-center"><h4 class="green-blue-text">@time.StartTime</h4></td>
                                <td class="align-content-center"><h4 class="green-blue-text">@time.EndTime</h4></td>
                                @if (isEditable)
                                {
                                    <td>
                                        <button class="btn btn-warning p-2" @onclick="() => EditSchedule(time.Id)"><i class="bi bi-pencil-fill"></i></button>
                                        <button class="btn btn-danger p-2" @onclick="() => DeleteSchedule(time.Id)"><i class="bi bi-trash"></i></button>
                                    </td>
                                }
                            </tr>
                        }

                    </tbody>
                </table>


                <SfDialog Width="450px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@isEdit">
                    <DialogTemplates>
                        <Header>
                            @(isAdding ? @Localizer["Add schedule"] : Localizer["Update schedule"])
                        </Header>
                        <Content>
                            <div>
                                @if (isAdding)
                                {
                                    <div class="row mb-3">
                                        <SfCheckBox Label="@Localizer["Is date"]" @bind-Checked="@isDate"></SfCheckBox>
                                    </div>
                                }
                                <div>
                                    <div>

                                        @if (isDate && editedSchedule != null)
                                        {
                                            <SfDatePicker TValue="DateTime?" @bind-Value="@editedSchedule.Date"></SfDatePicker>
                                        }
                                        else
                                        {
                                            <SfDropDownList TValue="int" TItem="DayOfWeekItem" Placeholder="@Localizer["Select a day"]" DataSource="@DaysOfWeek" @bind-Value="selectedDayOfWeek.ID">
                                                <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                                            </SfDropDownList>
                                        }

                                    </div>
                                    <div class="container row mt-3 text-center">
                                        <div class="col-5 offset-1">
                                            <label>@Localizer["Start Time"]</label>
                                            <SfTimePicker TValue="TimeSpan" @bind-Value="@editedSchedule.StartTime">
                                                <TimePickerMaskPlaceholder Hour="hour" Minute="minute"></TimePickerMaskPlaceholder>
                                            </SfTimePicker>
                                        </div>

                                        <div class="col-5">
                                            <label>@Localizer["End Time"]</label>

                                            <SfTimePicker TValue="TimeSpan" @bind-Value="@editedSchedule.EndTime">
                                                <TimePickerMaskPlaceholder Hour="hour" Minute="minute"></TimePickerMaskPlaceholder>
                                            </SfTimePicker>
                                        </div>

                                    </div>
                                </div>
                            </div>

                        </Content>
                    </DialogTemplates>
                    <DialogButtons>
                        <DialogButton Content="@Localizer["Save"]" IsPrimary="true" OnClick="@UpsertSchedule" />
                        <DialogButton Content="@Localizer["Cancel"]" OnClick="@CancelEdit" />
                    </DialogButtons>
                </SfDialog>

            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public List<ScheduleDto> schedule { get; set; } = new List<ScheduleDto>();
    [Parameter]
    public bool isEditable { get; set; } = false;
    [Parameter]
    public string? masterId { get; set; }
    public bool isEdit { get; set; } = false;
    private bool isDate { get; set; } = false;
    private List<DayOfWeekItem> DaysOfWeek { get; set; } = new();
    private DayOfWeekItem selectedDayOfWeek { get; set; } = new DayOfWeekItem();
    public ScheduleDto? editedSchedule { get; set; } = new ScheduleDto();
    private bool isAdding = false;
    private CultureInfo culture
    {
        get
        {
            return CultureInfo.CurrentCulture;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            schedule = schedule.OrderBy(s => s.DayOfWeek).ToList();
        }
        DaysOfWeek = Enum.GetValues(typeof(DayOfWeek))
            .Cast<DayOfWeek>()
            .Select(day => new DayOfWeekItem
                {
                    ID = (int)day,
                    Text = culture.DateTimeFormat.GetDayName(day)
                }).ToList();
    }
   
    protected override async Task OnParametersSetAsync()
    {
        if (schedule == null || schedule.Count == 0)
        {
            await GetMasterSchedule();
        }
    }

    private async Task GetMasterSchedule()
    {
        var data = await _userService.GetMasterSchedule(masterId);
        if (data.IsSuccess)
        {
            schedule = data.Data;
            schedule = schedule.OrderBy(s => s.DayOfWeek).ToList();
            StateHasChanged();
        }
        else
        {
            showToastr(data.ErrorMessage);
        }
    }
    public bool CheckSchedule()
    {
        if(editedSchedule.StartTime > editedSchedule.EndTime)
        {
            showToastr(Localizer["StartBiggerEnd"]);
            return false;
        }
        return true;
    }

    public void EditSchedule(int scheduleId)
    {
        editedSchedule = new ScheduleDto(schedule.FirstOrDefault(s => s.Id == scheduleId) ?? new ScheduleDto());
        if (editedSchedule != null)
        {
            isDate = editedSchedule.Date != null;
            if (editedSchedule.DayOfWeek != null)
            {
                selectedDayOfWeek = DaysOfWeek.First(d => d.ID == editedSchedule.DayOfWeek);
            }
            isEdit = true;
        }
    }

    public async Task UpsertSchedule()
    {
        
        if (editedSchedule == null)
        {
            showToastr(Localizer["Nothing to add or update"]);
            return;
        }
        if (!CheckSchedule())
        {
            return;
        }
        if (!isDate)
        {
            editedSchedule.DayOfWeek = selectedDayOfWeek.ID;
            editedSchedule.Date = null;
        }

        if (isAdding)
        {
            editedSchedule.AppUserId = masterId;
            var res = await _userService.AddMasterSchedule(editedSchedule);
            if (String.IsNullOrEmpty(res))
            {
                await GetMasterSchedule();
                isAdding = false;
                CancelEdit();
            }
            else
            {
                showToastr(res);
            }
        }
        else
        {
            var itemsToUpdate = new List<ScheduleDto>();
            itemsToUpdate.Add(editedSchedule);
            var res = await _userService.UpdateMasterSchedule(itemsToUpdate, masterId != null, masterId);
            if (String.IsNullOrEmpty(res))
            {
                showToastr("", Localizer["Schedule was succesfully updated"]);
                var newSchedule = new ScheduleDto(editedSchedule);
                var sch = schedule.Where(s => s.Id == editedSchedule.Id).FirstOrDefault();
                var ind = schedule.IndexOf(sch);
                if (ind != -1)
                {
                    schedule[ind] = newSchedule;
                }

                CancelEdit();
            }

        }
    }

    public void AddSchedule()
    {
        editedSchedule = new ScheduleDto();
        isAdding = true;
        isEdit = true;
    }

    public async Task DeleteSchedule(int scheduleId)
    {
        editedSchedule = schedule.FirstOrDefault(s => s.Id == scheduleId);
        if (editedSchedule != null)
        {
            var isConfirm = await DialogService.ConfirmAsync(Localizer["SureToDeleteSchedule"], Localizer["Delete schedule"]);
            if (isConfirm)
            {
                var res = await _userService.DeleteMasterSchedule(scheduleId);
                if (String.IsNullOrEmpty(res))
                {
                    showToastr("", Localizer["Schedule was succefully removed"]);
                    schedule.Remove(editedSchedule);
                    StateHasChanged();
                }
                else
                {
                    showToastr(res);
                }
            }
        }
    }


    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }

    public void CancelEdit()
    {
        editedSchedule = new ScheduleDto();
        isEdit = false;
    }

    private class DayOfWeekItem
    {
        public int ID { get; set; }
        public string Text { get; set; } = string.Empty;
    }
}
