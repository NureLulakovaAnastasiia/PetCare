@using System.Globalization
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.SplitButtons
@inject SfDialogService DialogService
@inject IServiceService service
@inject IOrganizationService orgService
@inject IJSRuntime _JSRuntime
@inject IUserService _userService
@rendermode InteractiveAuto
@inject IStringLocalizer<Account> Localizer

<div class="row justify-content-center mb-4">
    <h2 class="col-5 offset-4">@Localizer["Schedule"]</h2>
</div>
@if(isOrganization && employeesList != null)
{
    <div class="mb-3 col-5 offset-4">
        <SfDropDownList ID="dropdown" TValue="string" TItem="ShortEmployeeDto" Placeholder="Select a master" DataSource="@employeesList" @bind-Value="@selectedMaster.Id" >
        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
            <DropDownListEvents TValue="string" TItem="ShortEmployeeDto" ValueChange="ChangeMaster"></DropDownListEvents>
    </SfDropDownList>
    </div>
}
<SfSchedule TValue="AppointmentData" FirstDayOfWeek="1" EnableAdaptiveUI="true" StartHour="6:00" ShowQuickInfo="false" EnableAllDayScroll="true" Height="700"
            SelectedDateChanged="DateRangeChanged" >
    <ScheduleTemplates>
        <EditorTemplate>
         
            <table class="custom-event-editor" width="100%" cellpadding="5">
                @{
                    var data = context as AppointmentData;
                }

                <tbody>
                    @if (String.IsNullOrEmpty(data.Type))
                    {
                        <tr >
                            <td colspan="2" class="text-center">
                                <SfButtonGroup Mode="Syncfusion.Blazor.SplitButtons.SelectionMode.Single">
                                    <ButtonGroupButton @bind-Selected="@isRecord" >@Localizer["Record"]</ButtonGroupButton>
                                    <ButtonGroupButton @bind-Selected="@isBreak" >@Localizer["Break"]</ButtonGroupButton>
                                </SfButtonGroup>
                              </td>
                        </tr>
                    }

                    @if (data.Type == "Record" || isRecord)
                    {
                        <tr>
                            <td class="e-textlabel">@Localizer["Service Name"]</td>
                        <td colspan="4">
                            <SfDropDownList TValue="int" TItem="ServiceName" @bind-Value="@(data.ServiceId)" Placeholder="@Localizer["Select a service name"]" DataSource="@serviceNames">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="int" TItem="ServiceName"></DropDownListEvents>
                            </SfDropDownList>
                        </td>
                    </tr>
                    }
                    
                    <tr>
                        <td class="e-textlabel">@Localizer["From"]</td>
                        <td colspan="4">
                            <SfDateTimePicker @bind-Value="@(data.StartTime)"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">@Localizer["To"]</td>
                        <td colspan="4">
                            <SfDateTimePicker @bind-Value="@(data.EndTime)"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">@Localizer["Description"]</td>
                        <td colspan="4">
                            <SfTextBox Multiline="true" @bind-Value="@(data.Description)"></SfTextBox>
                        </td>
                    </tr>
                    @if (data.Type == "Break" || isBreak){
                        <tr>
                            <td class="e-textlabel">@Localizer["Recurrence"]</td>
                            <td colspan="4">
                                <SfRecurrenceEditor @bind-Value="@(data.RecurrenceRule)" Frequencies="@Repeats"  >

                                </SfRecurrenceEditor>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td class="e-textlabel">@Localizer["Status"]</td>
                            <td colspan="4">
                                <div>
                                    @if (data.Status.Id == 3)
                                    {
                                        <h5 class="text-danger">@Localizer["Cancelled"]</h5>
                                    }else{
                                    <SfDropDownList TValue="int" TItem="Status" Placeholder="@Localizer["Change status"]" DataSource="@StatusData" @bind-Value="@data.Status.Id">
                                        <DropDownListFieldSettings Value="Id" Text="Name" ></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </EditorTemplate>
    </ScheduleTemplates>

    <ScheduleEventSettings TValue="AppointmentData" DataSource="@events" >
@*         <ScheduleField Id="Id">
            <FieldSubject Name="ServiceName"></FieldSubject>
            <FieldDescription Name="Description"></FieldDescription>
            <FieldStartTime Name="StartTime"></FieldStartTime>
            <FieldEndTime Name="EndTime"></FieldEndTime>
        </ScheduleField>


 *@    

    </ScheduleEventSettings>

    <ScheduleEvents TValue="AppointmentData" OnPopupOpen="OnPopupOpen" ActionCompleted="UpdateDataInDb"></ScheduleEvents>
    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.Month"></ScheduleView>
    </ScheduleViews>

</SfSchedule>

<div class="mt-4">
    <_MasterSchedule isEditable="@true" masterId="@selectedMaster.Id" @key="selectedMaster.Id"></_MasterSchedule>
</div>



@code {
    private DayOfWeek _firstDayOfWeek = DayOfWeek.Tuesday;
    private bool _fixed;
    private List<GetRecordDto> records = new List<GetRecordDto>();
    private List<BreakDto> breaks = new List<BreakDto>();
    private List<DateTime> availableDates = new List<DateTime>();
    private ObservableCollection<AppointmentData> events = new ObservableCollection<AppointmentData>();
    private List<ServiceName> serviceNames = new List<ServiceName>();
    private bool isRecord = true;
    private bool isBreak = false;
    [Parameter]
    public bool isOrganization { get; set; } = false;
    private List<ShortEmployeeDto> employeesList = new List<ShortEmployeeDto>();
    private ShortEmployeeDto selectedMaster = new ShortEmployeeDto();
    private bool isDisposed = false;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (isOrganization)
            {
                var empl = await orgService.GetShortEmployees();
                if (empl.IsSuccess && empl.Data != null)
                {
                    employeesList = empl.Data;
                    if (String.IsNullOrEmpty(selectedMaster.Id))
                    {
                        selectedMaster = employeesList[0];
                    }
                }
            }
            await ChangeMaster();
        }
        var culture = CultureInfo.CurrentCulture.TwoLetterISOLanguageName;
        if (localizeStatus.ContainsKey(culture)) {
            StatusData = localizeStatus[culture];
        }
    }

    private async Task ChangeMaster()
    {
        breaks.Clear();
        events.Clear();
        availableDates.Clear();
        serviceNames.Clear();
        var res = await _userService.getMasterBreaks(selectedMaster.Id);
        if (res.IsSuccess)
        {
            breaks = res.Data;
            UpdateBreaks();
            GetMasterServicesNames();
            DateRangeChanged(DateTime.Now);
            StateHasChanged();
        }
    }


    private async void DateRangeChanged(DateTime date)
    {
        foreach (var avDate in availableDates)
        {
            if (avDate.Month == date.Month && avDate.Year == date.Year)
            {
                return;
            }
        }
        var recordsResult = await service.getMasterRecordForMonth(date, selectedMaster.Id);
        if (recordsResult.IsSuccess)
        {

            records.AddRange(recordsResult.Data);
            availableDates.Add(date);
            UpdateEvents(recordsResult.Data);
            //StateHasChanged();

            await showToastr("", Localizer["Records were succesfully gotten"]);

        }
        else
        {
            await showToastr(recordsResult.ErrorMessage);
        }
        StateHasChanged();
    }

    private void UpdateEvents(List<GetRecordDto> getRecords)
    {
        foreach (var record in getRecords)
        {
            var same = events.FirstOrDefault(e => e.Id == record.Id);
            if(same != null)
            {
                events.Remove(same);
            }
            var status = localizeStatus["en"].FirstOrDefault(s => s.Name == record.Status);
            var appointment = new AppointmentData
                {
                    Id = record.Id,
                    Subject = record.ServiceName,
                    StartTime = record.StartTime,
                    EndTime = record.EndTime,
                Status = status == null ? new Status() { Id = 3, Name = "Cancelled" } : status,
                    Description = record.Description,
                    Comment = record.Comment != null ? record.Comment : "",
                    ServiceId = record.ServiceId,
                    Type = "Record"
                };
            switch (record.Status)
            {
                case "Created":
                    appointment.CssClass = "e-green";
                    break;
                case "Finished":
                    appointment.CssClass = "e-blue";
                    break;
                case "Cancelled":
                    appointment.CssClass = "e-red";
                    break;
            }

            events.Add(appointment);
        }
    }

    private void UpdateBreaks()
    {
        for (int i = 0; i < breaks.Count; i++)
        {
            if (breaks[i].DayOfWeek != null)
            {
                var same = events.Where(e => e.Id == breaks[i].Id * -1).FirstOrDefault();
                if (same != null)
                {
                    events.Remove(same);
                }
                var sameDateTime = breaks.FindAll(br => BreakDto.HasSameTimeDate(br, breaks[i]));
                if (sameDateTime.Count > 1)
                {
                    var rule = GetRecurrenceForMultipleBreaks(sameDateTime);
                    var ids = sameDateTime.Select(x => x.Id).ToList();

                    var created = GetWeeklyBreak(breaks[i], ids, rule);

                    events.Add(created);
                    foreach(var item in sameDateTime)
                    {
                        if(breaks.IndexOf(item) > i)
                        {
                            breaks.Remove(item);
                        }
                    }
                }
                else
                {
                    events.Add(GetWeeklyBreak(breaks[i], null));
                }
            }
            else
            {
                events.Add(new AppointmentData
                    {
                        Id = breaks[i].Id * -1,
                        Subject = "Break",
                        StartTime = breaks[i].StartDate + breaks[i].StartTime,
                        EndTime = breaks[i].StartDate + breaks[i].EndTime,
                        Description = "Break",
                        CssClass = "e-break",
                        Type = "Break",
                    });
            }
        }
    }

    private async void UpdateDataInDb(ActionEventArgs<AppointmentData> args)
    {
        if(args.ActionType == ActionType.EventChange)
        {
            var changedEvents = new List<GetRecordDto>();
            var changedBreaks = new List<BreakDto>();
            foreach (var rec in args.ChangedRecords)
            {
                if (rec.Type == "Record")
                {
                    changedEvents.Add(mapAppointment(rec));
                }else if(rec.Type == "Break")
                {
                    var added = args.AddedRecords.Where(x => x.RecurrenceID == rec.Id).FirstOrDefault();
                    if (added != null)
                    {
                        changedBreaks.AddRange(await mapBreak(added, true));
                        args.AddedRecords.Remove(added);
                    }
                    else
                    {
                        changedBreaks.AddRange(await mapBreak(rec, false));
                    }
                }
            }

            var res = await _userService.UpdateAppointments(changedEvents);
            var breakRes = await _userService.UpsertBreaks(changedBreaks, selectedMaster.Id);

            if (String.IsNullOrEmpty(res) || String.IsNullOrEmpty(breakRes))
            {
                if (changedBreaks.Count > 0 || args.AddedRecords.Count > 0)
                {
                    await OnAfterRenderAsync(true);
                }
                UpdateEvents(changedEvents);
                StateHasChanged();
                showToastr("", Localizer["Records were succesfully updated"]);
            }
            else
            {
                showToastr(res);
            }
        }else if(args.ActionType == ActionType.EventCreate)
        {
            if (args.AddedRecords.Count > 0)
            {
                await AddNewRecords(args.AddedRecords);
                await OnAfterRenderAsync(true);
            }
        }else if(args.ActionType == ActionType.EventRemove)
        {
            if (args.DeletedRecords != null && args.DeletedRecords.Count > 0)
            {
                string reason = "";
                if (args.DeletedRecords[0].Type == "Record")
                {
                    reason = await DialogService.PromptAsync(Localizer["Enter reason to cancel appointment:"], Localizer["Cancel Appointment"]);
                    if (!String.IsNullOrEmpty(reason))
                    {
                        await DeleteRecords(args.DeletedRecords, reason);
                    }
                    else
                    {
                        showToastr(Localizer["Reason cannot be empty"]);
                        events.Add(args.DeletedRecords[0]);
                    }
                }
                else
                {
                    await DeleteRecords(args.DeletedRecords, reason);
                }

            }
        }
    }

    private async Task AddNewRecords(List<AppointmentData> records)
    {
        List<GetRecordDto> recordsToAdd = new List<GetRecordDto>();
        List<BreakDto> breaksToAdd = new List<BreakDto>();
        foreach(var item in records)
        {
            if(item.Type == "Break" || isBreak)
            {
                breaksToAdd.AddRange(await mapBreak(item, true));
            }
            else
            {
                recordsToAdd.Add(mapAppointment(item));
            }
        }
        string temp = "";
        if(recordsToAdd.Count > 0)
        {

            foreach(var record in recordsToAdd)
            {
                temp += await _userService.AddRecord(new RecordDto(record));
            }
        }
        if(breaksToAdd.Count > 0)
        {
            breaksToAdd.ForEach(x => x.Id = 0);
            temp += await _userService.UpsertBreaks(breaksToAdd, selectedMaster.Id);
        }

        if (String.IsNullOrEmpty(temp))
        {
            showToastr("", Localizer["Data were succefully added"]);
        }
        else
        {
            showToastr(temp);
        }
    }

    private async void GetMasterServicesNames()
    {
        var names = await _userService.GetMasterServicesNames(selectedMaster.Id);
        if (names.IsSuccess)
        {
            foreach(var item in names.Data)
            {
                if (serviceNames.Find(x => x.Id == item.Key) == null)
                {
                    serviceNames.Add(new ServiceName
                        {
                            Id = item.Key,
                            Name = item.Value
                        });
                }
            }

        }
        else
        {
            showToastr(Localizer["No services were found"]);
        }
    }

    private async void OnPopupOpen(PopupOpenEventArgs<AppointmentData> args)
    {
        if (args.Type == PopupType.Editor)
        {
            if (args.Data is AppointmentData appointment && (appointment.Status.Id == 3 || appointment.Status.Id == 0 || appointment.StartTime < DateTime.Now))
            {
                await _JSRuntime.InvokeVoidAsync("hideDeleteButton");
            }
            else
            {
                await _JSRuntime.InvokeVoidAsync("showDeleteButton");
            }
        }
    }

    private async Task DeleteRecords(List<AppointmentData> records, string reason)
    {
        List<int> recordsToDelete = new List<int>();
        List<int> breaksToDelete = new List<int>();
        foreach (var item in records)
        {
            if (item.Type == "Break")
            {
                var breaks = await mapBreak(item, false);
                breaksToDelete.AddRange(breaks.Select(b => b.Id));
            }
            else
            {
                recordsToDelete.Add(mapAppointment(item).Id);
            }
        }
        string temp = "";
        if (recordsToDelete.Count > 0)
        {

            foreach (var record in recordsToDelete)
            {
                temp += await _userService.CancelAppointment(record, reason);
            }
        }
        if (breaksToDelete.Count > 0)
        {
            temp += await _userService.DeleteBreaks(breaksToDelete);
        }

        if (String.IsNullOrEmpty(temp))
        {
            showToastr("", Localizer["Record was succesfully cancelled"]);
            foreach(var item in records)
            {
                if(item.Type == "Record")
                {
                    item.CssClass = "e-red";
                    item.Status = new Status() { Id = 3, Name = "Cancelled" };
                    events.Add(item);
                }
            }
            StateHasChanged();
        }
        else
        {
            showToastr(temp);
        }
    }

    private GetRecordDto mapAppointment(AppointmentData data)
    {
        var status = localizeStatus["en"].FirstOrDefault(s => s.Id == data.Status.Id);
        var serviceName = serviceNames.Where(x => x.Id == data.ServiceId).Select(x => x.Name).FirstOrDefault();
        return new GetRecordDto
            {
                Id = data.Id, // * -1
                Description = data.Description,
                StartTime = data.StartTime,
                EndTime = data.EndTime,
                Comment = data.Comment,
                ServiceName = serviceName == null ? data.Subject : serviceName,
                Status = status != null ? status.Name : data.Status.Name,
                ServiceId = data.ServiceId
            };
    }

    private async Task<List<BreakDto>> mapBreak(AppointmentData data, bool isNew)
    {
        var res = new List<BreakDto>();
        var dayOfWeek = GetDaysOfWeek(data.RecurrenceRule);

        DateTime? endDate = data.EndTime.Date;
        if (data.RecurrenceRule != null) {
            endDate = GetUntilDate(data.RecurrenceRule);
        }

        var id_ind = 0;
        var hasIds = data.breakIds != null && data.breakIds.Count == dayOfWeek.Count;
        foreach (var dayOfWeekNum in dayOfWeek){
            var newBreak = new BreakDto
                {
                    Id = hasIds ? data.breakIds[id_ind] : data.Id * -1,
                    StartTime = new TimeSpan(data.StartTime.Hour, data.StartTime.Minute, 0),
                    EndTime = new TimeSpan(data.EndTime.Hour, data.EndTime.Minute, 0),       
                    StartDate = data.StartTime.Date,
                    EndDate = endDate,
                    DayOfWeek = dayOfWeekNum >= 0 ? dayOfWeekNum : null
             };
            id_ind++;
            res.Add(newBreak);
        }
        if (res.Count > 0 && data.breakIds != null && res.Count != data.breakIds.Count)
        {
            var breaksToDelete = new List<int>();
            foreach(var id in data.breakIds)
            {
                if(res.Where(e => e.Id == id).FirstOrDefault() == null)
                {
                    breaksToDelete.Add(id);
                }
            }
            if(await DeleteBreaks(breaksToDelete))
            {
                showToastr("", "Breaks were succefully deleted");
            }
        }
        if (res.Count == 0)
        {
            res.Add(new BreakDto
                {
                    Id = data.Id * -1,
                    StartTime = new TimeSpan(data.StartTime.Hour, data.StartTime.Minute, 0),
                    EndTime = new TimeSpan(data.EndTime.Hour, data.EndTime.Minute, 0),
                    StartDate = data.StartTime.Date,
                    EndDate = endDate
                });
        }

        return res;
    }

    private List<int> GetDaysOfWeek(string rule)
    {
        var dayOfWeek = new List<int>();
        if (!String.IsNullOrEmpty(rule))
        {
            var ind = rule.IndexOf("BYDAY=");
            if (ind != -1)
            {
                ind += 6;
            }
            while (ind == -1 || ind < rule.Length)
            {
                var addItem = GetNumDayOfWeek(rule.Substring(ind, 2));
                if (addItem != -1)
                {
                    dayOfWeek.Add(addItem);
                    ind += 3;
                }
                else
                {
                    break;
                }
            }
        }
        return dayOfWeek;
    }

    private DateTime? GetUntilDate(string rule)
    {
        DateTime? endDate = null;
        if (rule != null)
        {
            var index = rule.IndexOf("UNTIL=");
            if (index != -1)
            {
                string format = "yyyyMMdd'T'HHmmss'Z'";
                string dateString = rule.Substring(index + 6);
                if (String.IsNullOrEmpty(dateString))
                {
                    endDate = DateTime.ParseExact(dateString, format, CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal);
                }
            }
        }
        return endDate;
    }

    public async Task<bool> DeleteBreaks(List<int> breaksIds)
    {
        var res = await _userService.DeleteBreaks(breaksIds);
        if (String.IsNullOrEmpty(res))
        {
            return true;
        }
        return false;
    }

    public string GetRecurrenceForMultipleBreaks(List<BreakDto> breaks) //day when repeats
    {
        string rule = "";
        foreach(var br in breaks)
        {
            var day = GetDayOfWeek(br.DayOfWeek);
            if (!String.IsNullOrEmpty(day))
            {
                rule = rule + day + ",";
            }
        }
        if(rule.LastIndexOf(",") == rule.Length - 1)
        {
            rule = rule.Substring(0, rule.Length - 1);
        }
        return rule;
    }

    public AppointmentData GetWeeklyBreak(BreakDto breakDto, List<int>? ids, string recurrenceRule = "")
    {
        recurrenceRule = $"FREQ=WEEKLY;BYDAY=" + (String.IsNullOrEmpty(recurrenceRule) ? GetDayOfWeek(breakDto.DayOfWeek) : recurrenceRule);


        var res = new AppointmentData
            {
                Id = breakDto.Id * -1,
                Subject = "Break",
                StartTime = breakDto.StartDate + breakDto.StartTime,
                EndTime = breakDto.StartDate + breakDto.EndTime,
                Description = "Recurring weekly break",
                CssClass = "e-break",
                Type = "Break",
                RecurrenceRule = recurrenceRule,
                breakIds = ids
            };

        if(breakDto.EndDate != null)
        {
            res.RecurrenceRule += ";UNTIL=" + breakDto.EndDate.Value.ToString("yyyyMMdd'T'HHmmss'Z'", CultureInfo.InvariantCulture);
            //res.EndTime = breakDto.EndDate.Value + breakDto.EndTime;
        }
        return res;
    }

    private string GetDayOfWeek(int? dayOfWeek)
    {
        switch (dayOfWeek)
        {
            case 0: return "SU"; 
            case 1: return "MO"; 
            case 2: return "TU"; 
            case 3: return "WE"; 
            case 4: return "TH";
            case 5: return "FR"; 
            case 6: return "SA"; 
            default: return "";
        }
    }
    private int GetNumDayOfWeek(string dayOfWeek)
    {
        switch (dayOfWeek)
        {
            case "SU": return 0;
            case "MO": return 1;
            case "TU": return 2;
            case "WE": return 3;
            case "TH": return 4;
            case "FR": return 5;
            case "SA": return 6;
            default: return -1;
        }
    }
    private async Task showToastr(string res, string successMessage = "")
    {
        if (isDisposed)
            return;
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }

    protected override void OnInitialized()
    {
        isDisposed = false;
    }

    public void Dispose()
    {
        isDisposed = true;
    }
    public class Status
    {
        public int Id { get; set; } = 0;
        public string Name { get; set; } = "";
    }

    public class ServiceName
    {
        public int Id { get; set; } = 0;
        public string Name { get; set; } = "";
    }

    List<Status> StatusData = new List<Status>()
    {
        new Status(){ Id= 1, Name= "Created" },
        new Status(){ Id= 2, Name= "Finished" }
    };

    private Dictionary<string, List<Status>> localizeStatus = new Dictionary<string, List<Status>>
    {
        {"en" , new List<Status> {new Status(){ Id= 1, Name= "Created" },
        new Status(){ Id= 2, Name= "Finished" } } },
        {"uk" , new List<Status> {new Status(){ Id= 1, Name= "Створено" },
        new Status(){ Id= 2, Name= "Завершено" } } }
    };

    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public string Comment { get; set; }
        public Status Status { get; set; } = new Status();
        public bool IsAllDay { get; set; }
        public string Type { get; set; }
        public int ServiceId { get; set; }
        public string CssClass { get; set; } = "";
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
        public List<int>? breakIds { get; set; } = null;
    }
    
    List<RepeatType> Repeats = new List<RepeatType>()
    {
       RepeatType.None, RepeatType.Weekly
    };
}

<style>
    .e-break {
        background: rgba(245, 126, 66, 0.7) !important;
        box-shadow: 1px 1px 5px #f57e42;
        border: 1px solid #f57e42 !important;
    }

    .e-green {
        background: rgba(40, 167, 69, 0.7) !important;
        box-shadow: 1px 1px 5px #28a745;
        border: 1px solid #28a745 !important;
    }

    .e-blue {
        background: rgba(0, 123, 255, 0.7) !important;
        box-shadow: 1px 1px 5px #007bff;
        border: 1px solid #007bff !important;
    }

    .e-red {
        background: rgba(220, 53, 69, 0.7) !important;
        box-shadow: 1px 1px 5px #dc3545;
        border: 1px solid #dc3545 !important;
    }


    .e-btn-group input:checked + label.e-btn{
        color: rgb(255, 255, 255);
        outline-offset: 0px;
        background: #023c57;
        border-color: #023c57;
        outline: #023c57 solid 0px;
    }

    .e-btn {
        color: #fff;
        background: rgb(var(--bs-secondary-rgb));
        border-color: rgb(var(--bs-secondary-rgb));
        transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    }

    .e-btn:hover {
        color: #fff;
            background: rgb(1, 77, 112);
            border-color: rgb(1, 77, 112);
        transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    }

    .e-footer-content .e-btn.e-primary.e-flat:not([disabled]) {
        color: rgb(255, 255, 255);
        background: rgb(var(--bs-primary-rgb));
        border-color: rgb(var(--bs-primary-rgb));
    }

    .e-footer-content .e-btn.e-primary.e-flat:not([disabled]):hover {
        color: rgb(255, 255, 255);
        background: rgb(3, 150, 113);
        border-color: rgb(3, 150, 113);
    }

    .custom-event-editor td{
        padding: 7px;
        padding-right: 16px;
    }

    .dropdown .e-dropdownlist {
        color: inherit !important;
    }

    .e-schedule {
        border-radius: 12px !important;
        font-family: var(--bs-body-font-family);
        color: var(--bs-secondary) !important;
    }

        .e-schedule .e-vertical-view {
            font-size: 1.4rem !important;
        }


    .e-work-cells, .e-header-cells, .e-date-header, .e-resource-cells,  td {
        color: var(--bs-secondary) !important;
        font-size: 1.1rem !important;
    }

    .e-current-day {
        color: var(--bs-primary) !important;
    }

    .e-schedule .e-vertical-view .e-current-time {
        font-size: 1rem;
        color: #038c69 !important;
    }

    .e-schedule .e-vertical-view .e-previous-timeline {
        border-top: 2px dotted #038c69 !important;
    }

    .e-current-timeline{
        border-top: 2px solid #038c69 !important;
    }

    .e-schedule .e-vertical-view .e-day-wrapper .e-appointment{
        border-radius: 8px !important;
        font-weight: 400 !important;
        color:#fff;
    }

    .e-schedule .e-vertical-view .e-header-cells.e-current-day {
        color: var(--bs-primary) !important;
    }

    .e-schedule .e-vertical-view .e-date-header-wrap{
        color: var(--bs-secondary) !important;
        font-size: 1.2rem !important;
    }

    .e-toolbar .e-toolbar-item .e-tbar-btn .e-tbar-btn-text {
        color: #023c57;
    }

    .e-schedule .e-schedule-toolbar .e-toolbar-items .e-toolbar-item.e-date-range .e-tbar-btn .e-tbar-btn-text{
        font-size: 1rem;
    }

    .e-calendar .e-content td.e-today.e-selected:hover span.e-day, .e-calendar .e-content td.e-selected:hover span.e-day, .e-calendar .e-content td.e-selected.e-focused-date span.e-day {
        background: var(--bs-primary);
        border: 1px solid var(--bs-primary);
    
    }

    .e-calendar .e-btn.e-today.e-flat.e-primary, .e-calendar .e-css.e-btn.e-today.e-flat.e-primary{
        background: var(--bs-primary);
        border: 1px solid var(--bs-primary);
    }

    .e-calendar .e-content td.e-today span.e-day, .e-calendar .e-content td.e-focused-date.e-today span.e-day {
        box-shadow: inset 2px 0 var(--bs-primary), inset 0 2px var(--bs-primary), inset -2px 0 var(--bs-primary), inset 0 -2px var(--bs-primary);
        color: #fff;
    }

    .e-calendar .e-content td.e-today span.e-day, .e-calendar .e-content td.e-focused-date.e-today span.e-day:hover {
            box-shadow: inset 2px 0 #038c69, inset 0 2px #038c69, inset -2px 0 #038c69, inset 0 -2px #038c69;
        color: #fff;
    }

    .e-calendar .e-btn.e-today.e-flat.e-primary, .e-calendar .e-css.e-btn.e-today.e-flat.e-primary:hover {
        background: #038c69;
        border: 1px solid #038c69;
    }

    .e-calendar .e-content td.e-today.e-selected span.e-day {
        background-color: var(--bs-primary);
        border: none;
        box-shadow: inset 1px 0 var(--bs-primary), inset 0 1px var(--bs-primary), inset -1px 0 var(--bs-primary), inset 0 -1px var(--bs-primary);
        color: #fff;
    }
    .e-calendar .e-content td.e-today.e-selected:hover span.e-day, .e-calendar .e-content td.e-selected:hover span.e-day, .e-calendar .e-content td.e-selected.e-focused-date span.e-day:hover {
        background: #038c69;
        border: 1px solid #038c69;
    }
    
    .e-toolbar .e-toolbar-item .e-tbar-btn:hover{
        background: var(--bs-secondary);
        border-color: var(--bs-secondary);
        border-style: solid;
        border-width: 0;
        border-radius: 4px;
        color: #fff;
    }

    .e-ddl.e-input-group.e-control-wrapper .e-input {
        font-size: 15px;
        font-family: var(--bs-font-sans-serif);
        color: var(--bs-secondary);
        box-shadow: none;
    }

    .e-dropdownbase .e-list-item, .e-dropdownbase .e-list-item.e-item-focus {
        color: var(--bs-secondary);
        font-family: var(--bs-font-sans-serif);
        min-height: 29px;
    }

        .e-dropdownbase .e-list-item.e-item-focus, .e-dropdownbase .e-list-item.e-active, .e-dropdownbase .e-list-item.e-active.e-hover, .e-dropdownbase .e-list-item.e-hover {
            color: #023c57;
            background-color: rgba(var(--bs-secondary-rgb), 0.1);
        }

    .e-outline.e-input-group.e-input-focus:hover:not(.e-success):not(.e-warning):not(.e-error):not(.e-disabled):not(.e-float-icon-left), .e-outline.e-input-group.e-input-focus.e-control-wrapper:hover:not(.e-success):not(.e-warning):not(.e-error):not(.e-disabled):not(.e-float-icon-left), .e-outline.e-input-group.e-input-focus:not(.e-success):not(.e-warning):not(.e-error):not(.e-disabled), .e-outline.e-input-group.e-control-wrapper.e-input-focus:not(.e-success):not(.e-warning):not(.e-error):not(.e-disabled) {
        border-color: var(--bs-secondary);
        box-shadow: inset 1px 1px var(--bs-secondary), inset -1px 0 var(--bs-secondary), inset 0 -1px var(--bs-secondary);
    }

    .e-recurrenceeditor .e-recurrence-table{
        display: none;
    }

    .e-recurrenceeditor .e-editor {
        display: inline-block;
    }

    .e-recurrenceeditor .e-input-wrapper {
        float: left;
        width: 100%;
    }


</style>

    <script>
    window.hideDeleteButton = function () {
        setTimeout(() => {
            let deleteButton = document.querySelector('.e-event-delete');
            if (deleteButton) {
                deleteButton.style.display = 'none';
            }
        }, 100);
    };

    window.showDeleteButton = function () {
        setTimeout(() => {
            let deleteButton = document.querySelector('.e-event-delete');
            if (deleteButton) {
                deleteButton.style.display = 'block';
            }
        }, 100);
    };

    </script>