@using WebPetCare.IServices
@inject IUserService userService
@inject NavigationManager Navigation
@inject IJSRuntime _JSRuntime
@inject SfDialogService DialogService
@inject IStringLocalizer<Account> Localizer
@inject IStringLocalizer<Resources.EnumResources> EnumLocalizer


<div class="d-flex justify-content-center  mt-3">
    <div class="col-10 m-3 m-lg-0 m-xl-0  align-items-center text-center">
        <div class="form-custom-border p-3 ">
            <h3 class=""><b>@Localizer["My records"]</b></h3>
            <hr />
           
            @if (records.Count > 0)
            {
                <div class="row justify-content-lg-end justify-content-xl-end justify-content-center">
                    <div class="col-lg-3 col-xl-3 col-5">
                        <h6>@Localizer["Sort by start time"]</h6>
                        <SfDropDownList TValue="SortOptions.SortDirection" TItem="SelectListItem<SortOptions.SortDirection>"
                                        DataSource="SortTypes" @bind-Value="sortType">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="SortOptions.SortDirection" TItem="SelectListItem<SortOptions.SortDirection>"
                                                ValueChange="SortRecords"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                    <div class="col-lg-3 col-xl-3 col-5">
                        <h6>@Localizer["Filter by status"]</h6>
                        <SfDropDownList TValue="SortOptions.FilterByRecordStatus" TItem="SelectListItem<SortOptions.FilterByRecordStatus>"
                                        DataSource="FilterTypes" @bind-Value="filterType">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="SortOptions.FilterByRecordStatus" TItem="SelectListItem<SortOptions.FilterByRecordStatus>"
                                                ValueChange="FilterRecords"></DropDownListEvents>
                        </SfDropDownList>
                    </div>

                    @if(filteredRecords.Count == 0)
                    {
                        <h3 class="mt-5">@Localizer["No records were found."]</h3>
                    }
                </div>
                <div class="container my-4 align-content-center">
                    <div class="row text-start">
                        @foreach (var record in filteredRecords)
                        {
                            <_ServiceReview serviceName="@record.ServiceName" IsReview="IsReview"
                                            CancelReview="CancelReview" PageUpdate="ReloadData" serviceId="@(record.ServiceId ?? 0)"></_ServiceReview>
                            <div class="card col-md-10 mb-4 offset-lg-1 offset-xl-1 offset-md-1 p-2">
                                <div class="card-header row align-items-center">
                                    <h3 class="col-lg-7 col-xl-7 col-md-7 col-10"><strong>@record.ServiceName</strong></h3>

                                    <div class="col-lg-3 col-xl-3 col-md-3 col-9 text-center text-primary">
                                        @record.StartTime.ToString("D")
                                        <h3>@record.StartTime.ToString("HH:mm") - @record.EndTime.ToString("HH:mm")</h3>
                                    </div>
                                    <div class="offset-1 col-1">
                                        <button class="btn rounded-circle btn-secondary p-0 ps-1 pe-1 me-2"
                                                @onclick="() => GoToServiceDetails(record.ServiceId ?? 0)">
                                            <i class="bi bi-arrow-up-right"></i>
                                        </button>
                                        </div>
                                </div>
                                <div class="card-body row ">
                                    <div class="col-lg-6 col-xl-6 col-md-6">
                                        <div class="ms-lg-1 ms-xl-1  mb-2 align-items-center">
                                            <h5 class="">@Localizer["Status"] : </h5>
                                            <h4 class="@(record.Status == "Created" || record.Status == "Finished" ? "text-primary" : "text-danger") col-8">@Localizer[record.Status]</h4>
                                        </div>
                                        @if (!String.IsNullOrEmpty(record.RecordCancelReason))
                                        {
                                            <div class="m-2 mt-3">
                                                <h5 class="">@Localizer["Cancel Reason"]: </h5>
                                                <h4 class="text-danger col-8">@record.RecordCancelReason</h4>
                                            </div>

                                        }

                                        <div class="ms-1 mt-3 align-items-center">
                                            @if (!String.IsNullOrEmpty(record.Comment))
                                            {
                                                <h5 class="">@Localizer["Comment"]: </h5>
                                                <h6 class=" col-9 green-blue-text"> @record.Comment </h6>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-xl-6 col-md-6 mb-3">
                                        <h5 class="">@Localizer["Description"]:</h5>
                                        <div class="ps-2 green-blue-text" style="white-space: pre-line;">
                                            @(!String.IsNullOrEmpty(record.Description) ? record.Description : Localizer["No description available"])
                                            </div>
                                        @if (!String.IsNullOrEmpty(record.PetName))
                                        {
                                            <h3 class=" mt-2">@Localizer["Pet"]: @record.PetName</h3>
                                        }
                                    </div>
                                    <div class="m-2 text-end">
                                        <div class="row">
                                            <div class="col-4">
                                            </div>
                                            <div class="col-10 col-lg-8 col-xl-8 col-md-8">
                                                @if (record.Status == "Finished")
                                                {
                                                    if (record.IsReviewed)
                                                    {
                                                        <label class="ps-3">@Localizer["AreadyWrittenReview"]</label>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-success p-2" @onclick="WriteReview">@Localizer["Add Review"]</button>
                                                    }
                                                }
                                                else if (record.Status == "Created")
                                                {
                                                    if (DateTime.UtcNow < record.StartTime)
                                                    {
                                                        var interval = record.StartTime - DateTime.UtcNow;
                                                        if (interval.TotalHours > 5)
                                                        {
                                                            <button class="btn btn-danger p-2" @onclick="() => CancelRecord(record.Id)">@Localizer["Cancel Record"]</button>
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <h3>@Localizer["No records were found."]</h3>
            }

        </div>
    </div>
</div>


@code {
    public List<RecordInfoDto> records = new List<RecordInfoDto>();
    public List<RecordInfoDto> filteredRecords = new List<RecordInfoDto>();
    private bool IsReview { get; set; } = false;
    private bool IsCancel { get; set; } = false;
    private SortOptions.SortDirection sortType = SortOptions.SortDirection.Newest;
    private SortOptions.FilterByRecordStatus filterType = SortOptions.FilterByRecordStatus.All;

    private List<SelectListItem<SortOptions.SortDirection>> SortTypes = new List<SelectListItem<SortOptions.SortDirection>>();
    private List<SelectListItem<SortOptions.FilterByRecordStatus>> FilterTypes = new List<SelectListItem<SortOptions.FilterByRecordStatus>>();

    protected override async Task OnInitializedAsync()
    {
        SetSortAndFilters();
    }


    private void SetSortAndFilters()
    {
        SortTypes = Enum.GetValues(typeof(SortOptions.SortDirection))
            .Cast<SortOptions.SortDirection>()
            .Select(e => new SelectListItem<SortOptions.SortDirection>(e, e.GetLocalizedEnum(EnumLocalizer)))
            .ToList();
        FilterTypes = Enum.GetValues(typeof(SortOptions.FilterByRecordStatus))
       .Cast<SortOptions.FilterByRecordStatus>()
       .Select(e => new SelectListItem<SortOptions.FilterByRecordStatus>(e, e.GetLocalizedEnum(EnumLocalizer)))
       .ToList();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var data = await userService.GetUserRecords();
            if (data.IsSuccess)
            {
                records = data.Data;
                FilterRecords();
                SortRecords();
                StateHasChanged();
            }
            else
            {
                showToastr(data.ErrorMessage);
            }

        }
        SetSortAndFilters();
    }

    public async Task CancelRecord(int recordId)
    {
        bool isConfirm = await DialogService.ConfirmAsync(Localizer["SureCancelRecord"], Localizer["Cancel Record"]);
        if (isConfirm)
        {
            var res = await userService.CancelRecord(recordId);
            if (String.IsNullOrEmpty(res))
            {
                showToastr("", Localizer["Record was succesfully cancelled"]);
                ReloadData();
            }
            else
            {
                showToastr(res);
            }
        }
    }


    public void CancelReview()
    {
        IsReview = false;
        StateHasChanged();
    }

    public async void ReloadData()
    {
        await OnAfterRenderAsync(true);
    }


    public void WriteReview()
    {
        IsReview = true;
        StateHasChanged();
    }

    private void GoToServiceDetails(int serviceId)
    {
        Navigation.NavigateTo($"/service-id={serviceId}");
    }

    public void SortRecords()
    {
        switch (sortType)
        {
            case SortOptions.SortDirection.Newest:
                filteredRecords = filteredRecords.OrderByDescending(e => e.StartTime).ToList();
                break;
            case SortOptions.SortDirection.Oldest:
                filteredRecords = filteredRecords.OrderBy(e => e.StartTime).ToList();

                break;
        }
    }

    public void FilterRecords()
    {
        switch (filterType)
        {
            case SortOptions.FilterByRecordStatus.All:
                filteredRecords = records.ToList();
                break;
            case SortOptions.FilterByRecordStatus.Created:
                filteredRecords = records.Where(e => e.Status == "Created").ToList();
                break;
            case SortOptions.FilterByRecordStatus.Finished:
                filteredRecords = records.Where(e => e.Status == "Finished").ToList();
                break;
            case SortOptions.FilterByRecordStatus.Cancelled:
                filteredRecords = records.Where(e => e.Status == "Cancelled").ToList();
                break;

        }

        SortRecords();

    }


    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }
}
