@using static System.Net.WebRequestMethods
@inject IUserService _userService
@inject IJSRuntime _JSRuntime
@inject IStringLocalizer<Account> Localizer




<div class="d-flex justify-content-center">
    <div class="col-lg-10 align-items-center text-center ">
        <div class="form-custom-border p-3 ">
            @if (!IsEdit)
            {
                <div class="row text-center">
                    <h3 class="col-7 offset-2"><b>@Localizer["My portfolio"]</b></h3>
                    <button class="btn col-2 btn-func btn-warning" @onclick="OnButtonClick"><i class="bi bi-pencil-fill"></i>   @Localizer["Edit"]</button>
                    <button class="btn col-2 btn-func btn-func-primary ms-2" @onclick="OpenModal"><i class="bi bi-plus-circle"></i>   @Localizer["Add"]</button>
                </div>
            }
            <form method="post" @onsubmit="UpdatePortfolio">
                @if (IsEdit)
                {
                    <div class="row text-center">
                        <h3 class="col-7 offset-2"><b>@Localizer["My portfolio"]</b></h3>
                        <button type="button" class="btn col-2 btn-func mx-1 btn-danger" @onclick="CancelEdit">@Localizer["Cancel"]</button>
                        <button type="submit" class="btn col-2 btn-func btn-success">@Localizer["Save"]</button>
                    </div>
                }

                <hr />

                @if (portfolioDtos.Count > 0)
                {
                    <div class="container my-4">
                        <div class="row">
                            @foreach (var portfolio in portfolioDtos)
                            {
                                <div class="col-md-3 mb-4">
                                    <div class="card">
                                        <div class="image-row-container">
                                            @if (portfolio.Photo != null && portfolio.Photo.Length > 0)
                                            {
                                                var base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(portfolio.Photo)}";
                                                <img src="@base64Image" class="card-img-top fixed-image" alt="Portfolio Image" />
                                            }
                                            else
                                            {
                                                <div class="card-body text-center">
                                                    <p>@Localizer["No image available"]</p>
                                                </div>
                                            }
                                        </div>
                                        <div class="card-body">
                                            <InputTextArea @bind-Value="portfolio.Text" placeholder="@portfolio.Text"
                                                           class="input-textarea-style p-2 m-0 col-12" disabled="@(!IsEdit)" @oninput="() => AddToUpdated(portfolio.Id)" />
                                            @if (IsEdit)
                                            {
                                                <button class="btn btn-danger p-2" @onclick="()=>DeletePortfolio(portfolio.Id)"><i class="bi bi-trash"></i></button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                }
                else
                {
                    <div>
                        <h3>@Localizer["NoPortfolio"]</h3>
                    </div>
                }
            </form>

            @if (IsModalOpen)
            {
                <div class="modal-overlay">
                    <div class="modal-content">
                        <div>
                            <span class="close" @onclick="CloseModal">&times;</span>
                            <h2>@Localizer["Add new item to portfolio"]</h2>
                        </div>
                        <div class="row text-center">
                            <div class="col col-6 p-2">
                                <label for="description" class="p-2">@Localizer["Description"]</label>
                                <textarea id="description" @bind="Description" class="form-control"></textarea>
                            </div>
                            <div class="col-6 p-2 pt-0 text-center justify-content-start mb-4 pe-4">
                                <label for="photo" class="d-block p-2 pt-3">@Localizer["Photo"]</label>
                                <label class="image-upload pb-4 " >
                                    <InputFile class="p-2 ms-2" OnChange="HandleFileSelected" accept="image/*" />
                                    <div class="image-container">
                                        @if (!string.IsNullOrEmpty(UploadedImage))
                                        {
                                            <img src="@UploadedImage" alt="Preview Image" style="display: block;">

                                        }
                                        else
                                        {
                                            <div class="placeholder">
                                                <span class="plus"><i class="bi bi-plus-square-dotted"></i></span>
                                            </div>
                                        }
                                    </div>
                                </label>
                            </div>
                        </div>
                        <div class="row justify-content-center mt-3">
                            <button type="button" class="btn col-2  mx-1 btn-danger p-2" @onclick="CloseModal">@Localizer["Cancel"]</button>
                            <button type="submit" class="btn col-2 btn-success p-2" @onclick="AddPortfolio">@Localizer["Save"]</button>
                        </div>
                    </div>
                </div>
            }
            

         </div>
    </div>
</div>


@code{
    public bool IsEdit = false;
    public List<PortfolioDto> portfolioDtos = new List<PortfolioDto>();
    private bool IsModalOpen = false;
    public List<int> itemsToUpdate = new List<int>();

    private string Description { get; set; }
    private IBrowserFile SelectedFile;
    private string? UploadedImage;
    private const long MaxFileSize = 2 * 1024 * 1024;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        if (SelectedFile.Size > MaxFileSize)
        {
            UploadedImage = null;
            showToastr(Localizer["TooBigImage"]);
            return;
        }
        using var stream = new MemoryStream();
        await SelectedFile.OpenReadStream(long.MaxValue).CopyToAsync(stream);
        UploadedImage = $"data:{SelectedFile.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";
        StateHasChanged();
    }

    private void AddToUpdated(int id)
    {
        if (!itemsToUpdate.Contains(id))
        {
            itemsToUpdate.Add(id);
        }
    }

    private async Task UpdatePortfolio()
    {
        var dataToUpdate = new List<PortfolioDto>();
        foreach(var id in itemsToUpdate)
        {
            var item = portfolioDtos.Find(p => p.Id == id);
            if(item != null)
            {
                dataToUpdate.Add(item);
            }
        }

        if (dataToUpdate.Count > 0)
        {
            var res = await _userService.UpsertPortfolio(dataToUpdate);
            if (res.IsSuccess)
            {
                showToastr("", Localizer["Portfolio was succesfully updated"]);
                itemsToUpdate.Clear();

                IsEdit = false;
            }
            else
            {
                showToastr(res.ErrorMessage);
            }
        }
        else
        {
            IsEdit = false;
        }
    }

    private async Task DeletePortfolio(int id)
    {
        var item = portfolioDtos.FirstOrDefault(x => x.Id == id);
        if(item != null)
        {
            var res = await _userService.DeletePortfolio(id);
            if (String.IsNullOrEmpty(res))
            {
                portfolioDtos.Remove(item);
                showToastr("", Localizer["Item was succefully deleted"]);
            }
            else
            {
                showToastr(res);
            }
        }
    }

    private async Task AddPortfolio()
    {
        if (SelectedFile != null)
        {
            using var stream = new MemoryStream();
            await SelectedFile.OpenReadStream(long.MaxValue).CopyToAsync(stream);

            var addPortfolio = new PortfolioDto
                {
                    Id = 0,
                    Text = Description,
                    Photo = stream.ToArray()
                };

            var list = new List<PortfolioDto> { addPortfolio };
            var res = await _userService.UpsertPortfolio(list);
            if (res.IsSuccess)
            {
                if (res.Data.Count > 0)
                {
                    addPortfolio.Id = res.Data[0];
                    portfolioDtos.Add(addPortfolio);
                    showToastr("", Localizer["Portfolio was succesfully saved"]);
                    CloseModal();
                }
                else
                {
                    await OnAfterRenderAsync(true);
                }
            }
            else
            {
                showToastr(res.ErrorMessage);
            }


        }
        else
        {
            showToastr(Localizer["Please upload an image"]);
        }


    }

    private void OpenModal()
    {
        IsModalOpen = true;
        UploadedImage = null;
        Description = string.Empty;
    }

    private void CancelEdit()
    {
        IsEdit = false;
    }
    private void CloseModal()
    {
        IsModalOpen = false;
        StateHasChanged();
    }

    public async Task GetPortfolio()
    {
        var res = await _userService.GetMasterPortfolio();
        if (res.IsSuccess)
        {
            portfolioDtos = res.Data;
            StateHasChanged();
            showToastr("", Localizer["Data were succefully gotten"]);
        }
        else
        {
            showToastr(res.ErrorMessage);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetPortfolio();
        }
    }

    private void OnButtonClick()
    {
        IsEdit = !IsEdit;
    }

    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }
    
    
}

<style>
    .modal-overlay {
        position: fixed;
        z-index: 1020;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5); /* Тло напівпрозоре */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        z-index: 1030;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover, .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .image-upload {
        display: block;
        cursor: pointer;
        width: 100%;
        height: 100%;
        max-height: 550px;
        max-width: 550px;
        
    }

        .image-upload input {
            display: none;
        }



    .image-container {
        min-height: 270px;
        width: 100%;
        height: 100%;
        background: #ddd;
        z-index: 1500;
        border-radius: 12px;
        background-color: rgba(240,240,240,0.4);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        overflow: hidden;
    }

        .image-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }

    .placeholder {
        position: absolute;
        display: flex;
        z-index: 2000;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.05);
    }

    .plus {
        font-size: 40px;
        
        font-weight: bold;
        color: #777;
    }


    .image-row-container {
        width: 100%; 
        height: 200px;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden; 
        background-color: #f3f3f3;
    }

    .fixed-image {
        width: 100%; 
        height: 100%; 
        object-fit: cover; 
    }



</style>
