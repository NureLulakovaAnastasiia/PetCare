@inject IUserService userService
@inject IServiceService serviceService
@inject SfDialogService DialogService
@inject IJSRuntime _JSRuntime
@inject IStringLocalizer<Account> Localizer


<div class="d-flex justify-content-center mt-2">
    <div class="col-lg-10 align-items-center text-center ">
        <div class="form-custom-border p-3 align-content-center">
            <div class="row col-10 offset-1">
                <h2><strong>@Localizer["Reviews"]</strong></h2>
                <hr />
                <div class="row justify-content-end">
                    <div class="col-3">
                        <h6>@Localizer["Sort"]</h6>
                        <SfDropDownList TValue="SortOptions.SortTypesReview" TItem="SelectListItem<SortOptions.SortTypesReview>"
                                        DataSource="SortTypes" @bind-Value="sortType">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="SortOptions.SortTypesReview" TItem="SelectListItem<SortOptions.SortTypesReview>"
                                                ValueChange="SortReviews"></DropDownListEvents>
                        </SfDropDownList>
                    </div>
                </div>
                @foreach (var item in reviews)
                {
                    var image = item.Photo != null ? $"data:image/png;base64,{Convert.ToBase64String(item.Photo)}" : null;

                    <div class="main-review p-2 m-1 text-start ">
                        <div class="ms-4 row align-items-center">
                            <h4 class="col-3">@item.AppUserName</h4>

                            <SfRating Value=item.Rate Disabled="true" CssClass="col-4 text-start">
                                <FullTemplate>
                                    <img src=@fullTemplateImage widht="25" height="25" />
                                </FullTemplate>
                                <EmptyTemplate>
                                    <img src=@emptyTemplateImage widht="25" height="25" />
                                </EmptyTemplate>
                                <LabelTemplate>@context+</LabelTemplate>
                            </SfRating>

                            <div class="col-4 text-end">
                                @if (item.isYours)
                                {
                                    <button class="btn btn-danger p-2" style="font-size: 1rem;" @onclick="() => DeleteReview(item.Id)"><i class="bi bi-trash"></i></button>

                                }
                                @if ((item.Comments == null || item.Comments.Count == 0) && isOwner)
                                {
                                    <button class="btn btn-success p-2" style="font-size: 1rem;" @onclick="() => AddComment(item.Id)">@Localizer["Add comment"]</button>
                                }
                             </div>
                        </div>
                        @if (!String.IsNullOrEmpty(item.ServiceName))
                        {
                            <h6 class="ms-4 green-blue-text">@Localizer["For service"]: @item.ServiceName</h6>
                        }
                        <p class="ms-4">@item.Date.ToString("g")</p>

                        <hr />

                        <div class="row ms-3">
                            <div class="@(image != null ? "col-7" : "") ">
                                <p>@item.Text</p>
                            </div>
                            @if (image != null && item.Photo.Count() > 0)
                            {
                                <img src="@image" class="pb-2 col-4" alt="Answer image" style="max-width: 200px;" />
                            }
                         </div>
                        
                        
                        
                    </div>
                    @if (item.Comments != null && item.Comments.Count > 0)
                    {
                        <div class="row text-start">
                            <div class="offset-2">
                                @foreach (var comment in item.Comments)
                                {
                                    <div class="col-8 review-comment p-3 m-2">
                                        <div class="row align-items-center">
                                            <h4 class="col-9 ms-3">@comment.AppUserName</h4>
                                            
                                            @if (comment.isYours)
                                            {
                                                <div class="col-2 text-end">
                                                    <button class="btn btn-danger p-2" @onclick="() => DeleteComment(comment.Id)"><i class="bi bi-trash"></i></button>
                                                </div>
                                            }
                                        </div>
                                        <hr />
                                        <p class="ms-3">@comment.Text</p>
                                    
                                    
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    
                }
                <SfDialog Width="350px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@isCommenting">
                    <DialogTemplates>
                        <Header> @Localizer["Add Comment"] </Header>
                        <Content> 
                            <div>
                                <h5>@Localizer["Please, write your comment"]:</h5>
                                <InputTextArea class="input-textarea-style" style="min-width: 100%" @bind-Value="commentDto.Text"></InputTextArea>
                            </div>

                        </Content>
                    </DialogTemplates>
                    <DialogButtons>
                        <DialogButton Content="@Localizer["OK"]" IsPrimary="true" OnClick="@SaveComment" />
                        <DialogButton Content="@Localizer["Cancel"]" OnClick="@CancelComment" />
                    </DialogButtons>
                   
                </SfDialog>
                @if(reviews == null || reviews.Count == 0)
                {
                    <h3>@Localizer["There is no reviews"]</h3>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? masterId { get; set; }
    [Parameter]
    public int? serviceId { get; set; }
    public List<ReviewDto> reviews = new List<ReviewDto>();
    private string fullTemplateImage = "Images/star-fill.svg";
    private string emptyTemplateImage = "Images/star.svg";
    private bool isOwner = false;
    private bool isCommenting = false;
    private ReviewCommentDto commentDto = new ReviewCommentDto();
    private SortOptions.SortTypesReview sortType = SortOptions.SortTypesReview.Newest;
    private List<SelectListItem<SortOptions.SortTypesReview>> SortTypes = new List<SelectListItem<SortOptions.SortTypesReview>>();

    protected override async Task OnInitializedAsync()
    {
        SortTypes = Enum.GetValues(typeof(SortOptions.SortTypesReview))
            .Cast<SortOptions.SortTypesReview>()
            .Select(e => new SelectListItem<SortOptions.SortTypesReview>(e))
            .ToList();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (masterId != null)
            {
                var res = await userService.GetMasterReviews(masterId);
                if (res.IsSuccess)
                {
                    reviews = res.Data;
                    isOwner = String.IsNullOrEmpty(masterId);
                }
            }
            else if (serviceId != null)
            {
                var res = await serviceService.GetReviews((int)serviceId);
                if (res.IsSuccess || res.ErrorMessage == "Owner")
                {
                    reviews = res.Data;
                    isOwner = res.ErrorMessage == "Owner";
                }
                else
                {

                }
            }
            SortReviews();
            StateHasChanged();
        }
    }

    private void AddComment(int reviewId)
    {
        commentDto = new ReviewCommentDto { ReviewId = reviewId };
        isCommenting = true;
        StateHasChanged();
    }

    private void CancelComment()
    {
        commentDto = new ReviewCommentDto();
        isCommenting = false;
        StateHasChanged();
    }

    private async Task SaveComment()
    {
        var res = await userService.AddReviewComment(commentDto);
        if (String.IsNullOrEmpty(res))
        {
            showToastr("", Localizer["Comment was succesfully added"]);
            CancelComment();
            await OnAfterRenderAsync(true);
        }
    }

    private async Task DeleteReview(int reviewId)
    {
        var res = await userService.DeleteReview(reviewId);
        if (String.IsNullOrEmpty(res))
        {
            showToastr("", Localizer["Review was succesfully deleted"]);
            await OnAfterRenderAsync(true);

        }
        else
        {
            showToastr(res);
        }
    }

    private async Task DeleteComment(int commentId)
    {
        var res = await userService.DeleteReviewComment(commentId);
        if (String.IsNullOrEmpty(res))
        {
            showToastr("", Localizer["Comment was succesfully deleted"]);
            await OnAfterRenderAsync(true);

        }
        else
        {
            showToastr(res);
        }
    }

    public void SortReviews()
    {
        switch (sortType)
        {
            case SortOptions.SortTypesReview.Newest:
                reviews = reviews.OrderByDescending(e => e.Date).ToList();
                break;
            case SortOptions.SortTypesReview.Oldest:
                reviews = reviews.OrderBy(e => e.Date).ToList();
                break;
            case SortOptions.SortTypesReview.HighRate:
                reviews = reviews.OrderByDescending(e => e.Rate).ToList();
                break;
            case SortOptions.SortTypesReview.LowRate:
                reviews = reviews.OrderBy(e => e.Rate).ToList();
                break;
        }
    }

    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }
}
