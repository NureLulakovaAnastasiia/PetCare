@using static System.Net.WebRequestMethods
@inject IUserService _userService
@inject IJSRuntime _JSRuntime

<div class="d-flex justify-content-center  mt-3">
    <div class="col-lg-10 align-items-center text-center">
        <div class="form-custom-border p-3 ">
            @if (!IsEdit)
            {
                <div class="row text-center">
                    <h3 class="col-@(Pets.Count > 0 ? "7" : "8") offset-2"><b>My pets</b></h3>
                    @if (Pets.Count > 0)
                    {
                        <button class="btn col-2 btn-func btn-warning me-2" @onclick="OnButtonClick"><i class="bi bi-pencil-fill"></i>   Edit</button>
                    }
                    <button class="btn col-2 btn-func btn-func-primary" @onclick="OpenModal"><i class="bi bi-plus-circle"></i>     Add</button>
                </div>
            }
            <form method="post" @onsubmit="UpdatePets">
                @if (IsEdit)
                {
                    <div class="row text-center">
                        <h3 class="col-7 offset-2"><b>My pets</b></h3>
                        <button type="button" class="btn col-2 btn-func mx-1 btn-danger" @onclick="CancelEdit">Cancel</button>
                        <button type="submit" class="btn col-2 btn-func btn-success">Save</button>
                    </div>
                }

                <hr />

                @if (Pets.Count > 0)
                {
                    <div class="container my-4">
                        <div class="d-flex justify-content-around flex-wrap">
                            @foreach (var pet in Pets)
                            {
                                <div class="col-5 mb-4">
                                    <div class="card">
                                        <div class="row g-0 d-flex align-items-center">
                                            <div class="col-7 ">
                                                <div class="image-row-container ms-2">
                                                    @if (pet.Photo != null && pet.Photo.Length > 0)
                                                    {
                                                        var base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(pet.Photo)}";
                                                        <img class="fixed-image" src="@base64Image" alt="Pets Image" style="display:block;">


                                                    }
                                                    else
                                                    {
                                                        <div class="card-body text-center placeholder">
                                                            <p>No image available</p>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-5">
                                                <div class="card-body text-start">
                                                    <div>
                                                        <label>Name</label>
                                                        <InputText @bind-Value="pet.Name" placeholder="@pet.Name"
                                                                   class="input-textarea-style p-2 m-0 col-12" disabled="@(!IsEdit)" />
                                                    </div>

                                                    <div>
                                                        <label>Breed</label>
                                                        <InputText @bind-Value="pet.Breed" placeholder="@pet.Breed"
                                                                   class="input-textarea-style p-2 m-0 col-12" disabled="@(!IsEdit)" />
                                                    </div>
                                                    <div>
                                                        <label>Type</label>
                                                        <InputText @bind-Value="pet.Type" placeholder="@pet.Type"
                                                                   class="input-textarea-style p-2 m-0 col-12" disabled="@(!IsEdit)" />
                                                    </div>

                                                    <div class="row justify-content-around text-center mt-2">
                                                        @if (IsEdit)
                                                        {
                                                            <button type="button" class="btn btn-info col-6 p-2" @onclick="() => AddToUpdated(pet.Id)">Update</button>
                                                            <button class="btn btn-danger col-3 p-2" @onclick="()=>DeletePet(pet.Id)"><i class="bi bi-trash"></i></button>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="text-center m-3 ">
                                            <label>Description</label>
                                            @if (!IsEdit && String.IsNullOrEmpty(pet.Description))
                                            {
                                                <h6>No description available</h6>
                                            }
                                            <InputTextArea @bind-Value="pet.Description" placeholder="@pet.Description" style="min-height: 30px"
                                                           class="input-textarea-style p-2 m-0 col-12" disabled="@(!IsEdit)" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center">
                        <h4>You don't have pets yet.</h4>
                    </div>
                }
            </form>

            @if (IsModalOpen)
            {
                <div class="modal-overlay">
                    <div class="modal-content">
                        <div>
                            <span class="close" @onclick="CloseModal">&times;</span>
                            <h2>Add new pet</h2>
                        </div>
                        <div class="row text-center">
                            <div class="col col-6 p-2">
                                <div>
                                    <label>Name</label>
                                    <InputText @bind-Value="newPet.Name"
                                               class="input-textarea-style p-2 m-0 col-12" />
                                </div>

                                <div>
                                    <label>Breed</label>
                                    <InputText @bind-Value="newPet.Breed"
                                               class="input-textarea-style p-2 m-0 col-12" />
                                </div>
                                <div>
                                    <label>Type</label>
                                    <InputText @bind-Value="newPet.Type"
                                               class="input-textarea-style p-2 m-0 col-12" />
                                </div>

                                <div>
                                    <label>Description</label>
                                    <InputTextArea @bind-Value="newPet.Description"
                                                   class="input-textarea-style p-2 m-0 col-12" />
                                </div>
                            </div>
                            <div class="col-6 p-2 pt-0 text-center justify-content-start mb-3 pe-4">
                                <label for="photo" class="d-block pb-2">Photo</label>
                                <label class="image-upload pb-4 ">
                                    <InputFile class="p-2 ms-2" OnChange="HandleFileSelected" accept="image/*" />
                                    <div class="image-container">
                                        @if (!string.IsNullOrEmpty(UploadedImage))
                                        {
                                            <img src="@UploadedImage" alt="Preview Image" style="display: block;">

                                        }
                                        else
                                        {
                                            <div class="placeholder">
                                                <span class="plus"><i class="bi bi-plus-square-dotted"></i></span>
                                            </div>
                                        }
                                    </div>
                                </label>
                            </div>
                        </div>
                        <div class="mt-3">
                            <button type="button" class="btn col-2 mx-1 btn-func-danger" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn col-2 btn-func-success" @onclick="AddPet">Save</button>
                        </div>
                    </div>
                </div>
            }


        </div>
    </div>
</div>



@code {

    [Parameter]
    public List<PetDto> Pets { get; set; } = new List<PetDto>();

    public bool IsEdit = false;
    private bool IsModalOpen = false;
    public List<int> itemsToUpdate = new List<int>();
    private IBrowserFile SelectedFile;
    private string? UploadedImage;

    public PetDto newPet = new PetDto();

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;

        using var stream = new MemoryStream();
        await SelectedFile.OpenReadStream(long.MaxValue).CopyToAsync(stream);
        UploadedImage = $"data:{SelectedFile.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";
        StateHasChanged();
    }

    private void AddToUpdated(int id)
    {
        if (!itemsToUpdate.Contains(id))
        {
            itemsToUpdate.Add(id);
        }
    }

    private async Task UpdatePets()
    {
        var dataToUpdate = new List<PetDto>();
        foreach (var id in itemsToUpdate)
        {
            var item = Pets.Find(p => p.Id == id);
            if (item != null)
            {
                dataToUpdate.Add(item);
            }
        }

        if (dataToUpdate.Count > 0)
        {
            var res = await _userService.UpdatePets(dataToUpdate);
            if (res.IsSuccess)
            {
                showToastr("", "Pets was succesfully updated");
                itemsToUpdate.Clear();
                IsEdit = false;
            }
            else
            {
                showToastr(res.ErrorMessage);
            }
        }
    }

    private async Task DeletePet(int id)
    {
        var item = Pets.FirstOrDefault(x => x.Id == id);
        if (item != null)
        {
            var res = await _userService.DeletePet(id);
            if (String.IsNullOrEmpty(res))
            {
                Pets.Remove(item);
                showToastr("", "Item was succefully deleted");
            }
            else
            {
                showToastr(res);
            }
        }
    }

    private async Task AddPet()
    {
        if (SelectedFile != null)
        {
            using var stream = new MemoryStream();
            await SelectedFile.OpenReadStream(long.MaxValue).CopyToAsync(stream);

            newPet.Photo = stream.ToArray();
            newPet.Id = 0;

            var res = await _userService.AddPet(newPet);
            if (res.IsSuccess)
            {
                if (res.Data != 0)
                {
                    newPet.Id = res.Data;
                    Pets.Add(newPet);
                    newPet = new PetDto();
                    showToastr("", "Pet was succesfully added");
                    CloseModal();
                }
                else
                {
                    await OnAfterRenderAsync(true);
                }
            }
            else
            {
                showToastr(res.ErrorMessage);
            }


        }
        else
        {
            showToastr("Please upload an image");
        }


    }

    private void OpenModal()
    {
        IsModalOpen = true;
        UploadedImage = null;
    }

    private void CancelEdit()
    {
        IsEdit = false;
        StateHasChanged();
    }

    private void CloseModal()
    {
        IsModalOpen = false;
        StateHasChanged();
    }



    private void OnButtonClick()
    {
        IsEdit = !IsEdit;
    }

    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await _JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }


}

<style>
    .modal-overlay {
        position: fixed;
        z-index: 1020;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5); /* Тло напівпрозоре */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        z-index: 1030;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover, .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }


    .fixed-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }


    .image-row-container {
        width: 100%;
        height: 230px;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        background-color: #f3f3f3;
    }

    .e-dlg-header * {
        color: var(--bs-secondary);
        font-size: 30px;
        font-weight: 500;
    }
</style>

