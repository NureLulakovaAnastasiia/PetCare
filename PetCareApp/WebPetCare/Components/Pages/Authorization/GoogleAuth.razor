@page "/signin"
@using Microsoft.AspNetCore.Components.Authorization
@using static WebPetCare.Components.Pages.Authorization.Login
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthorizationService _authService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Authorization> Localizer


@if (IsRole)
{
    <div class="container ">
        <div class="row col-7 offset-3 form-custom-border text-center justify-content-center mt-5">
            <div class="col-8 m-5">
                <h5>@Localizer["ChoseRole"]</h5>
                <div class="row justify-content-center mt-4">
                    <InputRadioGroup @bind-Value="role">
                        @foreach (var Erole in Enum.GetValues<Roles>())
                        {
                            <div class="col-5">
                                <label>
                                    <InputRadio Value="@Erole.ToString()" />
                                    @Localizer[Erole.ToString()]
                                </label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
                <button class="btn btn-primary mt-4" @onclick="RegisterUser">@Localizer["Submit"]</button>
            </div>
        </div>
    </div>
}
else
{
    //spinner
}

@code {
    private string email { get; set; } = string.Empty;
    [CascadingParameter]
    public Func<bool, Task> UpdateAuthenticationStatus { get; set; }
    public bool isAuthenticated { get; set; } = false;
    private bool IsRole { get; set; } = false;
    public string role = "User";
    private AppUser userDto { get; set; }
    private string? AuthMethod;
    // protected override async Task OnInitializedAsync()
    // {

    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await CheckAuthorization();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        AuthMethod = await GetAuthMethod();


        if (user.Identity?.IsAuthenticated ?? false)
        {

            if (isAuthenticated)
            {
                if(AuthMethod == "local")
                {
                    await SetAuthMethod("google");
                }
                Navigation.NavigateTo("/account");
                return;
            }
            else
            {
                email = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? "";
                var firstName = user.FindFirst(System.Security.Claims.ClaimTypes.GivenName)?.Value ?? "";
                var lastName = user.FindFirst(System.Security.Claims.ClaimTypes.Surname)?.Value ?? "";
                var profilePictureUrl = user.FindFirst("urn:google:picture")?.Value;
                var id = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "";

                if (String.IsNullOrEmpty(email))
                {
                    showToastr(Localizer["ErrorEmail"]);
                    Navigation.NavigateTo("/login");
                    return;
                }

                userDto = new AppUser
                    {
                        Email = email,
                        FirstName = firstName,
                        LastName = lastName,
                        GoogleId = id,
                        Photo = await DownloadImageAsByteArray(profilePictureUrl ?? ""),
                        Contacts = new Contacts() { AppUserId = "" }
                    };

                var res = await CheckEmail(id);

                if (res)
                {
                    showToastr("", Localizer["SuccesfulLogin"]);
                    Navigation.NavigateTo("/account");
                    IsRole = true;
                    return;
                }
                else
                {
                    await RegisterUser();
                    return;
                }
            }
        }
        else
        {
            showToastr(Localizer["ErrorEmail"]);
            Navigation.NavigateTo("/login");
            return;
        }
        Navigation.NavigateTo("/login");

    }

    private async Task<byte[]> DownloadImageAsByteArray(string imageUrl)
    {
        using HttpClient client = new HttpClient();
        return await client.GetByteArrayAsync(imageUrl);
    }

    private async Task<bool> CheckEmail(string id)
    {
        var res = await _authService.CheckGoogleLogin(email, id);
        if (res.Data)
        {
            await UpdateAuthenticationStatus(true);
            return true;
        }
        else
        {
            return false;
        }
    }

    private async Task RegisterUser()
    {
        var res = await _authService.RegisterGoogleUser(userDto, role);
        if (res.IsSuccess)
        {
            await UpdateAuthenticationStatus(true);
            showToastr("", Localizer["SuccessRegister"]);
            Navigation.NavigateTo("/");

        }
        else
        {
            showToastr(res.ErrorMessage);
            Navigation.NavigateTo("/login");

        }
    }


    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }
    
    private async Task CheckAuthorization()
    {
        isAuthenticated = await JSRuntime.InvokeAsync<bool>("checkTokenInSessionStorage");

    }

    private async Task<string> GetAuthMethod()
    {
        return await JSRuntime.InvokeAsync<string>("sessionStorageGetItem", "auth_method");

    }
    private async Task<string> SetAuthMethod(string value)
    {
        return await JSRuntime.InvokeAsync<string>("sessionStorageSetItem", "auth_method", value);

    }
}
<script>
    window.checkTokenInSessionStorage = () => {
        // Check if the token exists in sessionStorage
        return sessionStorage.getItem("token") != null;
    };
</script>