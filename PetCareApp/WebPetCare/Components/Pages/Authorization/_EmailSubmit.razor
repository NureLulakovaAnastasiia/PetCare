@inject IAuthorizationService authService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Authorization> Localizer

<div class="d-flex flex-column m-2 p-2 align-items-center text-center">
    @if (IsPasswordGetting)
    {
        <div>
            <h3>@Localizer["EnterNewPassword"]</h3>
        </div>

            <div class="col-8 form-group py-2 text-center">
                <h5>@Localizer["NewPassword"]</h5>
                <InputText type="password" class="form-control col-10" @bind-Value="passwordChange.NewPassword" DisplayName="Email" />
            <h5>@Localizer["ConfirmNewPassword"]</h5>
                <InputText type="password" class="form-control col-10" @bind-Value="passwordChange.NewPasswordSubmit" />
            </div>
            <button type="submit" class="btn btn-primary col-4 mt-3" @onclick="ChangePassword">@Localizer["Submit"]</button>
    }
    else
    {
        <div>
            <h3>@Localizer["ConfirmCode"]</h3>
        </div>
        <div class="code-input-container">
            @for (int i = 0; i < CodeLength; i++)
            {
                var localIndex = i;

                <input type="text" maxlength="1" class="code-input"
                id="codeInput_@localIndex"
                value="@Code[localIndex]"
                @oninput="(e) => OnInput(e, localIndex)"
                @onkeydown="(e) => OnKeyDown(e, localIndex)" />
            }
        </div>

    <button class="btn btn-primary mt-3" @onclick="SubmitEmail">@Localizer["Submit"]</button>
    }
</div>

@code {
    private string[] Code;
    public int CodeLength { get; set; } = 6;
    [Parameter]
    public string realCode { get; set; }

    [Parameter]
    public bool IsPasswordRestore { get; set; }

    [Parameter]
    public EventCallback ToLoginPage { get; set; }

    private bool IsPasswordGetting { get; set; } = false;
    private PasswordChange passwordChange { get; set; } = new PasswordChange();

    [Parameter]
    public string email { get; set; }

    [CascadingParameter]
    public Func<bool, Task> UpdateAuthenticationStatus { get; set; }

    protected override void OnInitialized()
    {
        Code = new string[CodeLength];
    }

    private async Task OnInput(ChangeEventArgs e, int index)
    {
        Code[index] = e.Value?.ToString();

        if (!string.IsNullOrEmpty(Code[index]) && index < CodeLength - 1)
        {
            await JSRuntime.InvokeVoidAsync("focusNextInput", $"codeInput_{index + 1}");
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e, int index)
    {
        if (e.Key == "Backspace" && index > 0 && string.IsNullOrEmpty(Code[index]))
        {
            await JSRuntime.InvokeVoidAsync("focusNextInput", $"codeInput_{index - 1}");
        }
    }

    public async Task SubmitEmail()
    {
        if (String.Equals(realCode, String.Join("", Code)))
        {
            if (IsPasswordRestore)
            {
                IsPasswordGetting = true;
            }
            else
            {
                var res = await authService.ConfirmEmail(email);
                if (!res)
                {
                    showToastr(Localizer["Error during confirming"]);
                }

                if (ToLoginPage.HasDelegate)
                {
                    showToastr(Localizer["Successful email confirmation"]);
                    await ToLoginPage.InvokeAsync();
                }
            }

        }
        else
        {
            showToastr(Localizer["Code mismatch"]);

        }
    }

    private async Task ChangePassword()
    {
        try
        {
            if (passwordChange != null && passwordChange.NewPassword.Equals(passwordChange.NewPasswordSubmit))
            {
                var res = await authService.ConfirmEmail(email, passwordChange.NewPassword);
                if (res)
                {
                    showToastr("", Localizer["SuccessPasswordChange"]);
                }
            }
            else
            {
                showToastr(Localizer["ErrorPasswordChange"]);
            }
        }
        catch (Exception ex)
        {
            showToastr(ex.Message);

        }
        if (ToLoginPage.HasDelegate)
        {
            await ToLoginPage.InvokeAsync();
        }

    }

    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }
  
}
