@page "/login"
@using System.Globalization


@inject IAuthorizationService authService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Authorization> Localizer


<PageTitle>Login</PageTitle>


<div class="row text-center justify-content-center mt-5">
    <div class="col-8 offset-4">
        @if (IsLogin)
        {
            <div class="col-7">
                <h1>@Localizer["WithReturning"]</h1>
                <EditForm Model="LoginModel" FormName="LoginForm" OnSubmit="LoginFunc" class="">
                    <div class="form-group py-2 text-center">
                        <h5>@Localizer["Email"]</h5>
                        <InputText class="form-control" @bind-Value="LoginModel.Email" DisplayName="Email" />
                        <h5>@Localizer["Password"]</h5>
                        <InputText type="password" class="form-control" @bind-Value="LoginModel.Password" />
                        <a @onclick="ShowEmailEnter">@Localizer["ForgotPassword"]</a>
                    </div>
                    <button type="submit" class="btn btn-primary col-10 mt-3">@Localizer["Login"]</button>
                </EditForm>
                <div class="mt-3">
                    <h6>@Localizer["NoAccount"] <a @onclick="() => SelectTab(false)">@Localizer["Register"]</a></h6>
                </div>
                <div class="row justify-content-center mt-4">
                    <button class="btn btn-outline-primary col-7" @onclick="GoogleLogin"><i class="bi bi-google"></i>    @Localizer["GoogleLogin"]</button>

                </div>

            </div>
        }
        else if (EmailEnter)
        {
            <div class="col-7">
                <h1>@Localizer["RestorePassword"]</h1>
                    <div class="form-group py-2 text-center">
                    <h5>@Localizer["EmailForCode"]</h5>
                        <InputText class="form-control" @bind-Value="LoginModel.Email" DisplayName="Email" />
                    </div>
                    <button type="submit" @onclick="ForgotPassword" class="btn btn-primary col-10 mt-3">@Localizer["Send"]</button>
            </div>
        }
        else if (!IsLogin && !IsCode)
        {
            <div class="col-7">
                <h1>@Localizer["NewAccount"]</h1>
                <EditForm Model="LoginModel" FormName="LoginForm" OnSubmit="RegisterFunc" class="">
                    <div class="form-group py-2 text-center">
                        <div class="row justify-content-between mb-3">
                            <div class="col-6">
                                <h5>@Localizer["FirstName"]</h5>
                                <InputText class="form-control" @bind-Value="RegisterModel.FirstName" />
                            </div>
                            <div class="col-6">
                                <h5>@Localizer["LastName"]</h5>
                                <InputText class="form-control" @bind-Value="RegisterModel.LastName" />
                            </div>
                        </div>
                        <div>
                            <h5>@Localizer["ChoseRole"]</h5>
                            <div class="row justify-content-center">
                            <InputRadioGroup @bind-Value="role">
                                @foreach (var Erole in Enum.GetValues<Roles>())
                                {
                                    <div class="col-5">
                                        <label>
                                            <InputRadio Value="@Erole.ToString()" />
                                                @Localizer[Erole.ToString()]
                                        </label>
                                    </div>
                                }
                            </InputRadioGroup>
                            </div>

                            <div class="mt-3">
                                <h5>@Localizer["Email"]</h5>
                                <InputText class="form-control" @bind-Value="RegisterModel.Email" />
                            </div>
                            <div class="mt-3">
                                <h5>@Localizer["Password"]</h5>
                                <InputText typeof="password" class="form-control" @bind-Value="RegisterModel.Password" />
                             </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary  col-10 mt-3">@Localizer["Register"]</button>
                </EditForm>
                <div class="mt-3">
                    <h6>@Localizer["HaveAnAccount"] <a @onclick="() => SelectTab(true)">@Localizer["Login"]</a></h6>
                </div>
            </div>
        }
        
    </div>
    <div class="col-8 ">
        @if (IsCode)
        {
            <_EmailSubmit realCode="@realCode" ToLoginPage="GoToLoginPage" email="@Email" IsPasswordRestore="@IsPasswordRestore" />
        }
    </div>

</div>


@code {
    private bool IsLogin { get; set; } = true;
    private bool IsCode { get; set; } = false;
    private bool IsPasswordRestore { get; set; } = false;
    private bool EmailEnter { get; set; } = false;

    [CascadingParameter]
    public Func<bool, Task> UpdateAuthenticationStatus { get; set; }

    public LoginDto LoginModel { get; set; } = new LoginDto();

    public RegisterDto RegisterModel { get; set; } = new RegisterDto();

    public string realCode { get; set; }
    public string role = "User";
    public string error = "";

    public string Email
    {
        get
        {
            if (LoginModel.Email != null)
            {
                return LoginModel.Email;
            }
            else if (RegisterModel.Email != null)
            {
                return RegisterModel.Email;
            }
            return "";
        }
    }

    public enum Roles
    {
        User,
        Organization

    }



    public async Task LoginFunc()
    {
        var result = await authService.Login(LoginModel);
        if (!String.IsNullOrEmpty(result.Error))
        {
            error = result.Error;
            showToastr(error);

            if (result.StatusCode != null && result.StatusCode == 403)
            {
                realCode = result.Result;
                CheckForCode();
            }
        }
        else
        {
            await UpdateAuthenticationStatus(true);
            Navigation.NavigateTo("/");
        }
    }

    public async Task RegisterFunc()
    {
        var result = await authService.Register(RegisterModel, role);
        if (!String.IsNullOrEmpty(result.Error))
        {
            error = result.Error;
            showToastr(error);

        }
        else
        {
            realCode = result.Result;
            CheckForCode();
        }
    }

    private void CheckForCode()
    {
        if (String.IsNullOrEmpty(realCode))
        {
            error = Localizer["Something went wrong"]; //generate new?
            showToastr(error);
        }
        else
        {
            IsLogin = false;
            IsCode = true;
        }
    }

    private void SelectTab(bool loginSelected)
    {
        IsLogin = loginSelected;
        LoginModel = new LoginDto();
        RegisterModel = new RegisterDto();
    }

    private void ShowEmailEnter()
    {
        IsLogin = false;
        EmailEnter = true;
        IsPasswordRestore = true;
        StateHasChanged();
    }

    private async Task ForgotPassword()
    {
        await GotCode();
        if (String.IsNullOrEmpty(error))
        {
            EmailEnter = false;
            IsCode = true;

            showToastr("", Localizer["Email was succesfuly sent"]);
        }
        else
        {
            showToastr(error);
        }
    }

    private async Task GotCode()
    {
        var result =  await authService.SendEmailForPasswordRestore(LoginModel.Email);
        if (!String.IsNullOrEmpty(result.Error))
        {
            error = result.Error;
            showToastr(error);

        }
        else
        {
            realCode = result.Result;
        }
    }

    public void GoToLoginPage()
    {
        IsLogin = true;
        IsCode = false;
        IsPasswordRestore = false;
        EmailEnter = false;
        LoginModel = new LoginDto();
        StateHasChanged();
    }


    private async void showToastr(string res, string successMessage = "")
    {
        if (String.IsNullOrEmpty(res))
        {
            await JSRuntime.InvokeVoidAsync("toastrInterop.showSuccess", successMessage, "Success");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("toastrInterop.showError", res, "Error");
        }
    }
    
    
    private void GoogleLogin()
    {
        Navigation.NavigateTo("/login-google", forceLoad: true);
    }
}


<style>
    body {
        background: local url("../Images/background-2.svg") no-repeat top;
    }
</style>